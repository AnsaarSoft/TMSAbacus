@{
    ViewBag.Title = "User Authorization";
}
<div class="pcoded-content">
    <div class="card p-20" style="min-height: 495px;">
        <!-- [ breadcrumb ] start -->
        <div class="page-header">
            <div class="page-block">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="page-header-title">
                            <h4> User Authorization </h4>
                        </div>
                    </div>
                    <div class="col-md-6 text-md-right">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="#"> Administration </a></li>
                            <li class="breadcrumb-item"> User Authorization </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ breadcrumb ] end -->
        <!-- [ Main Content ] start -->
        @*<div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="text-right">
                        <button id="new" class="plus-icon"> <i class="fas fa-plus-square"></i> </button>
                        <button id="find" class="find-icon"> <i class="fas fa-search"></i> </button>
                        <button id="first" class="step-backword-icon"> <i class="fas fa-step-backward"></i></button>
                        <button id="previous" class="backword-icon"> <i class="fas fa-backward"></i> </button>
                        <button id="next" class="forward-icon"> <i class="fas fa-forward"></i> </button>
                        <button id="last" class="step-forward-icon"> <i class="fas fa-step-forward"></i></button>
                    </div>
                </div>
            </div>
        </div>*@

        <div class="row">

            <div class="col-lg-4 mb-4">
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="home-tab" data-toggle="tab" href="#user" role="tab" aria-controls="home" aria-selected="true"> User </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="profile-tab" data-toggle="tab" href="#group" role="tab" aria-controls="profile" aria-selected="false"> Groups </a>
                    </li>
                </ul>
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade active show" id="user" role="tabpanel" aria-labelledby="home-tab">
                        <div class="list-group">
                            <div class="table-responsive">
                                <div id="users"></div>
                            </div>
                        </div>
                    </div>

                    <div class="tab-pane fade" id="group" role="document" aria-labelledby="profile-tab">
                        <div class="list-group">
                            <div class="table-responsive">
                                <div id="group"></div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="col-lg-8">
                <div class="table-responsive">
                    <div id="userAuth"></div>
                </div>
            </div>
        </div>

       

        <div class="row">
            <div class="col-lg-12 text-right mt-3">
                <button type="button" id="add_update" class="btn btn-success mr-2"> Add & Update </button>
                <button type="button" id="btnExpand" class="btn btn-primary mr-2"> Expand </button>
                <button type="button" id="btnCollapse" class="btn btn-primary mr-2"> Collapse </button>
                <button type="button" id="btnCopyUserAuth" class="btn btn-secondary" data-toggle="modal" onclick='GeneratePopupUserGrid();' data-target="#myModal_UserAuthorization">Copy Authorization</button>
              
                @{
                    TMSDeloitte.Models.UserSession sess = null;
                    if ((TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"] != null)
                    {
                        sess = (TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"];
                        if (sess.SessionUser.ISSUPER)
                        {
                            @*<button type="button" class="btn btn-success" data-toggle="modal" onclick='loadAuthLogData("/UserAuthorization/GetAuthorizationLogByDocID");' data-target="#myLogModal">Show Log</button>*@
                        }

                        var menu = sess.pagelist.Where(x => x.ID == (int)TMSDeloitte.Helper.Enums.FormsName.UserAuthorization).FirstOrDefault();
                        if (menu != null)
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="@menu.Role">
                        }
                        else
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="-1">
                        }
                    }

                }
            </div>
        </div>

        <!-- [ Main Content ] end -->
    </div> <!-- [ Card Content ] end -->
</div>

<div id="myModal_UserAuthorization" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title">Log</h4>*@
                <button type="button" class="close" data-dismiss="modal">×</button>

            </div>
            <div class="modal-body">
                <div id="userContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnOk" class="btn btn-primary">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
        </div>
    </div>
</div>

<div id="myLogModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title">Log</h4>*@
                <button type="button" class="close" data-dismiss="modal">×</button>
            </div>

            <div class="modal-body">
                <h8>User Authorization Log Table</h8>
                <div id="authLogContainer"></div>
            </div>
            <div class="modal-body">
                <h8>User Log Table</h8>
                <div id="userLogContainer"></div>
            </div>
            <div class="modal-body">
                <h8>User Group Log Table</h8>
                <div id="userGroupContainer"></div>
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">
    var userInstance;
    var groupInstance;
    var treeList;

    var MenuList;
    var AuthList;
    var userList;

    var popupUserInstance;
    var Table = [];
    var childSNo = 0;
    var DocID = 0;
    
    var user_Table = [];
    var index = 1;
    var allDocList = [];

    var isPageDataLoaded = false;
    function stopLoading() {
        if (isPageDataLoaded == false) {
            setTimeout(function () { stopLoading(); }, 500);
        }
        else {
            loadPanel.hide();
        }
    }

    function GetUserAuthorizationData()
    {
        loadPanel.show();
        var url = "/UserAuthorization/GetUserAuthorizationData";
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {
            allDocList = data.docList;
            MenuList = data.MenuList;
            AuthList = data.AuthList;
            GenerateGrid(data.MenuList, data.AuthList);
            userList = data.UserList;
            GenerateUserGrid(userList);
            GenerateGroupGrid(data.GroupList);
            loadPanel.hide();
            setTimeout(function () {
                treeList.selectAll();
            }, 1000);
            isPageDataLoaded = true;
        }).fail(function (data) {
            isPageDataLoaded = true;
            loadPanel.hide();
        });
    }

    function GenerateGrid(MenuList, AuthList)
    {
        //var MenuList = data.MenuList;
        //var AuthList = data.AuthList;
        treeList = $("#userAuth").dxTreeList({
            dataSource: MenuList,
            keyExpr: "ID",
            parentIdExpr: "Head_ID",
            showRowLines: true,
            columnAutoWidth: true,
            showBorders: true,
            showScrollbar: 'always',
            filterRow: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                mode: "multiple",
                recursive: true,
                showCheckBoxesMode: "always"
            },
            editing: {
                mode: "cell",
                allowUpdating: true
            },
            columns: [
                {
                caption: "S.No",
                width: 120,
                fixed: true,
                allowEditing: false,
                calculateCellValue: function (e) {

                    if (e.Head_ID == 0) {
                        return [e.ID].join(" ");

                    }
                    else {
                        if (e.ID != undefined)
                        {
                            var id = e.ID.toString();

                            if (e.Head_ID == 104) //For Setup Child
                            {
                                if(id>=100410)
                                {
                                    var id = [id.charAt(id.length - 2)].join(" ")+ [id.charAt(id.length - 1)].join(" ");;
                                    return id;
                                }
                                else
                                {
                                    return [id.charAt(id.length - 1)].join(" ");
                                }
                            }
                            else
                            {
                                
                                return [id.charAt(id.length - 1)].join(" ");
                            }
                            
                        }
                       
                       
                    }
                }
            },
            {
                dataField: "Index",
                visible: false,
            },


               {
                   dataField: "Name",
                   caption: "Menu Name",
                   allowEditing: false,
               },
                {
                    dataField: "Authorization",
                    caption: "Authorization",
                    setCellValue: function (rowData, value, currentRowData) {
                        rowData.Authorization = value;
                       currentRowData.Authorization = value;
                    },
                    lookup: {
                        dataSource: AuthList,
                        valueExpr: "Id",
                        displayExpr: "Name"
                    }
                },

            ],
            onSelectionChanged: function (e) {
               // Table = [];
                //var data = e.selectedRowsData[0];
                //console.log(e.selectedRowsData);

            },

        }).dxTreeList("instance");

    }

    function GenerateUserGrid(userData) {
         $(function () {
            userInstance = $("#users").dxDataGrid({
                dataSource: userData,
                keyExpr: "ID",
                showBorders: true,
                columnAutoWidth: true,
                allowColumnResizing: true,
                allowColumnReordering: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                paging: { pageSize: 10 },
                selection: {
                    mode: "multiple",
                    showCheckBoxesMode: "always"
                },
                filterRow: {
                    visible: true
                },
                columns: [{
                    dataField: "FULLNAME",
                    caption: "Users"
                }
                ],
                onSelectionChanged: function (selectedItems) {
                    if (selectedItems.selectedRowsData.length == 1)
                    {
                        var data = selectedItems.selectedRowsData[0];

                        if(data.AuthorizationTableID==0)
                        {
                            GetAuthorizationByUserID(data.ID);
                        }
                    }
                    if (selectedItems.selectedRowsData.length == 0)
                    {
                        treeList.clearSelection();
                    }
               
            }
            }).dxDataGrid("instance");

            $("#select-all-mode").dxSelectBox({
                dataSource: ["allPages", "page"],
                value: "allPages",
                onValueChanged: function (data) {
                    dataGrid.option("selection.selectAllMode", data.value);
                }
            });

            $("#show-checkboxes-mode").dxSelectBox({
                dataSource: ["none", "onClick", "onLongTap", "always"],
                value: "onClick",
                onValueChanged: function (data) {
                    dataGrid.option("selection.showCheckBoxesMode", data.value);
                    $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
                }
            });
        });

    }

    function GenerateGroupGrid(groupData) {
        $(function () {
            groupInstance = $("#group").dxDataGrid({
                dataSource: groupData,
                keyExpr: "ID",
                showBorders: true,
                columnAutoWidth: true,
                allowColumnResizing: true,
                allowColumnReordering: true,
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                paging: { pageSize: 10 },
                selection: {
                    mode: "multiple",
                    showCheckBoxesMode: "always"
                },
                filterRow: {
                    visible: true
                },
                columns: [{
                    dataField: "GROUPCODE",
                    caption: "Group"
                }
                ],
                onSelectionChanged: function (selectedItems) {
                    if (selectedItems.selectedRowsData.length == 1) {
                        var data = selectedItems.selectedRowsData[0];

                        if (data.AuthorizationTableID == 0) {
                            GetAuthorizationByGroupID(data.ID);
                        }
                    }
                    if (selectedItems.selectedRowsData.length == 0) {
                        treeList.clearSelection();
                    }

                }
            }).dxDataGrid("instance");

            $("#select-all-mode").dxSelectBox({
                dataSource: ["allPages", "page"],
                value: "allPages",
                onValueChanged: function (data) {
                    dataGrid.option("selection.selectAllMode", data.value);
                }
            });

            $("#show-checkboxes-mode").dxSelectBox({
                dataSource: ["none", "onClick", "onLongTap", "always"],
                value: "onClick",
                onValueChanged: function (data) {
                    dataGrid.option("selection.showCheckBoxesMode", data.value);
                    $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
                }
            });
        });

    }

    function GetAuthorizationByDocNum(docNum) {
        loadPanel.show();
        var url = "/UserAuthorization/GetAuthorizationByDocNum?docNum=" + docNum;
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {

            DocID = data.DocID;
            var auth_Table = [];
            user_Table = [];
            treeList.clearSelection();
            userInstance.clearSelection();

            $.each(data.authList, function (index, val) {
                if (val.IsChecked)
                {
                    auth_Table.push(val.ID);
                }
               
            });

            treeList = $("#userAuth").dxTreeList({
                dataSource: data.authList
            }).dxTreeList("instance");

            treeList.selectRows(auth_Table, true);

            
            $.each(data.userList, function (index, val) {
                user_Table.push(val.ID);
            });
            userInstance.selectRows(user_Table, true);

            var group_Table = [];
            groupInstance.clearSelection();
            $.each(data.groupList, function (index, val) {
                group_Table.push(val.ID);
            });
            groupInstance.selectRows(group_Table, true);
            loadPanel.hide();
        }).fail(function (data) {
        });
    }

    function GetAuthorizationByUserID(userID) {
        loadPanel.show();
        var url = "/UserAuthorization/GetAuthorizationByUserID?userid=" + userID;
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {
            console.log(data);

            DocID = data.DocID;
            var auth_Table = [];
            user_Table = [];

            treeList.clearSelection();
            $.each(data.authList, function (index, val) {
                if (val.IsChecked) {
                    auth_Table.push(val.ID);
                }

            });
            if (data.authList.length > 0)
            {
                treeList = $("#userAuth").dxTreeList({
                    dataSource: data.authList
                }).dxTreeList("instance");
                treeList.selectRows(auth_Table, true);
            }
            else
            {
                GenerateGrid(MenuList, AuthList);
            }

           // userInstance.clearSelection();
            $.each(data.userList, function (index, val) {
                user_Table.push(val.ID);
            });
            userInstance.selectRows(user_Table, true);

            var group_Table = [];
            groupInstance.clearSelection();
            $.each(data.groupList, function (index, val) {
                group_Table.push(val.ID);
            });
            groupInstance.selectRows(group_Table, true);

            loadPanel.hide();
        }).fail(function (data) {
            loadPanel.hide();
            console.log(data);
        });
    }

    function GetAuthorizationByGroupID(groupID) {
        loadPanel.show();
        var url = "/UserAuthorization/GetAuthorizationByGroupID?groupid=" + groupID;
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {
            console.log(data);
            DocID = data.DocID;
            treeList.clearSelection();
            userInstance.clearSelection();

            var auth_Table = [];
            
            $.each(data.authList, function (index, val) {
                if (val.IsChecked) {
                    auth_Table.push(val.ID);
                }

            });
            if (data.authList.length > 0) {
                treeList.selectRows(auth_Table, true);
            }
            else {
               // GenerateGrid(MenuList, AuthList);
            }

            //var user_Table = [];
            //$.each(data.userList, function (index, val) {
            //    user_Table.push(val.ID);
            //});
            //userInstance.selectRows(user_Table, true);

            //var group_Table = [];
            //groupInstance.clearSelection();
            //$.each(data.groupList, function (index, val) {
            //    group_Table.push(val.ID);
            //});
            

            loadPanel.hide();
        }).fail(function (data) {
            loadPanel.hide();
            console.log(data);
        });
    }
    function GeneratePopupUserGrid() {
        loadPanel.show();

        popupUserInstance = $("#userContainer").dxDataGrid({
            dataSource: userList,
            keyExpr: "ID",
            paging: { pageSize: 10 },
            columnAutoWidth: true,
            pager: { showInfo: true },
            allowColumnResizing: true,
            allowColumnReordering: true,
            showBorders: true,
            showScrollbar: 'always',
            filterRow: { visible: true },
            scrolling: {
                mode: "horizontal",
                showScrollbar: 'always'
            },
            selection: {
                mode: "multiple",
                showCheckBoxesMode: "always",
                allowSelectAll: true,
                selectAllMode: 'page'
            },
            columns: [
                {
                dataField: "EMPLOYEECODE",
                caption: "User Code"
                },
                {
                    dataField: "FULLNAME",
                    caption: "User Name"
                },
                {
                    dataField: "DEPARTMENTNAME",
                    caption: "Department"
                }
            ]
        }).dxDataGrid("instance");

        $("#select-all-mode").dxSelectBox({
            dataSource: ["allPages", "page"],
            value: "allPages",
            onValueChanged: function (data) {
                dataGrid.option("selection.selectAllMode", data.value);
            }
        });

        $("#show-checkboxes-mode").dxSelectBox({
            dataSource: ["none", "onClick", "onLongTap", "always"],
            value: "onClick",
            onValueChanged: function (data) {
                dataGrid.option("selection.showCheckBoxesMode", data.value);
                $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
            }
        });

        var popupUser_Table = [];
        var popupUsersList = userInstance.getSelectedRowsData();
        popupUserInstance.clearSelection();
        $.each(popupUsersList, function (index, val) {
            popupUser_Table.push(val.ID);
        });
        popupUserInstance.selectRows(popupUser_Table, true);

        loadPanel.hide();
    }

    function loadAuthLogData(url) {
        if (DocID != 0)
        {
            url = url + "?docId=" + DocID;

            $.ajax({
                url: url,
                method: "GET",
                data: {},
                async: false,
            }).done(function (data) {
                $("#authLogContainer").dxDataGrid({
                    dataSource: JSON.parse(data.dt_Auth.Data),
                    paging: { pageSize: 10 },
                    columnAutoWidth: true,
                    pager: { showInfo: true },
                    allowColumnResizing: true,
                    allowColumnReordering: true,
                    showBorders: true,
                    showScrollbar: 'always',
                    filterRow: { visible: true },
                    scrolling: {
                        mode: "horizontal",
                        showScrollbar: 'always'
                    },
                });
                $("#userLogContainer").dxDataGrid({
                    dataSource: JSON.parse(data.dt_User.Data),
                    paging: { pageSize: 10 },
                    columnAutoWidth: true,
                    pager: { showInfo: true },
                    allowColumnResizing: true,
                    allowColumnReordering: true,
                    showBorders: true,
                    showScrollbar: 'always',
                    filterRow: { visible: true },
                    scrolling: {
                        mode: "horizontal",
                        showScrollbar: 'always'
                    },
                });
                $("#userGroupContainer").dxDataGrid({
                    dataSource: JSON.parse(data.dt_Group.Data),
                    paging: { pageSize: 10 },
                    columnAutoWidth: true,
                    pager: { showInfo: true },
                    allowColumnResizing: true,
                    allowColumnReordering: true,
                    showBorders: true,
                    showScrollbar: 'always',
                    filterRow: { visible: true },
                    scrolling: {
                        mode: "horizontal",
                        showScrollbar: 'always'
                    },
                });


            }).fail(function (data) {
                console.log(data);
            });
}
        


    }

    function ValidateAuthorization() {
        var id = $("#AuthID").val();
        if (id != -1) {
            if (id == 2) {
                $("#new").remove();
                $("#find").remove();
                $("#add_update").remove();
                $("#btnCopyUserAuth").remove();
                $("#userAuth").dxTreeList({ disabled: true });
                $("#group").dxDataGrid({ disabled: true });
                $("#users").dxDataGrid({ disabled: true });
            }
        }
    }

    function AddUpdate()
    {
        var notSaved = $("#userAuth").dxTreeList('instance').getController('editing').hasChanges();
        if (notSaved) {
            setTimeout(function () { AddUpdate(); }, 2000);
        }
        else
        {
            var isSuccess = true;
            var message = '';

            var authorizationList = treeList.getSelectedRowsData("all");
            var usersList = userInstance.getSelectedRowsData();
            var groupList = groupInstance.getSelectedRowsData();

            //if (authorizationList.length == 0) {
            //    isSuccess = false;
            //    message = 'Please select atleast 1 authorization, ';
            //}
            if (usersList.length == 0 && groupList.length == 0) {
                isSuccess = false;
                message = message + 'Please select atleast 1 user and 1 group ';
            }
            //if (groupList.length == 0) {
            //    isSuccess = false;
            //    message = message+'Please select atleast 1 group';
            //}

            if (isSuccess) {
                loadPanel.show();
                var url = "/UserAuthorization/AddUpdateUserAuthorization";
                $.ajax({
                    type: "POST",
                    url: url,
                    contentType: 'application/json',
                    data:
                        JSON.stringify({
                            DocID: DocID,
                            authList: authorizationList,
                            userList: usersList,
                            groupList: groupList
                        }),
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        loadPanel.hide();
                        if (response.Success) {
                            AlertToast('success', response.Message);
                            setTimeout(function () {
                                window.location.reload();
                            }, 5000);
                        }
                        else {
                            AlertToast('error', 'Exception occured on Add/Update');
                        }
                    },
                    error: function (response) {
                        console.log(response);
                        loadPanel.hide();
                    },
                    failure: function (response) {
                        console.log(response);
                        loadPanel.hide();
                    }

                })
            }
            else {
                loadPanel.hide();
                AlertToast('error', message);

            }
        }
    }

    $('document').ready(function () {
        loadPanel.show();
        setTimeout(function () { GetUserAuthorizationData(); }, 100);
        stopLoading();
        ValidateAuthorization();

        $('#add_update').click(function () {
            
            loadPanel.show();
            var gridContainer = $("#userAuth").dxTreeList("instance");
            gridContainer.saveEditData();
            setTimeout(function () { AddUpdate(); }, 2000);

        });
        $('#btnExpand').click(function () {
            var tree = $("#userAuth").dxTreeList("instance");
            tree.option('autoExpandAll', true);
            tree.refresh();
        });
        $('#btnCollapse').click(function () {
            treeList.collapseRow(1);
            treeList.collapseRow(2);
            treeList.collapseRow(3);
            treeList.collapseRow(4);
            treeList.collapseRow(6);
        });
        $('#new').click(function () {
            Table = [];
            $("#docNumber").val("");
            $('#docNumber').prop("disabled", true);
            $("#sapFunction").dxSelectBox({ value: -1 });
            GetUserAuthorizationData();
        });
        $('#find').click(function () {
            $("#docNumber").val("");
            $('#docNumber').prop("disabled", false);
        });
        $('#first').click(function () {
            $('#docNumber').prop("disabled", true);
            index = 0;
            GetAuthorizationByDocNum(allDocList[index]);
        });
        $('#last').click(function () {
            $('#docNumber').prop("disabled", true);
            index = allDocList.length - 1;
            GetAuthorizationByDocNum(allDocList[index]);
        });
        $('#previous').click(function () {
            $('#docNumber').prop("disabled", true);
            if (index != 0)
                index = index - 1;
            GetAuthorizationByDocNum(allDocList[index]);
        });
        $('#next').click(function () {
            $('#docNumber').prop("disabled", true);
            if (index < allDocList.length - 1)
                index = index + 1;

            GetAuthorizationByDocNum(allDocList[index]);
        });

        $('#btnOk').click(function () {

            var popupUsers = popupUserInstance.getSelectedRowsData();

            var popupUser_Table = [];
            $.each(popupUsers, function (index, val) {
                popupUser_Table.push(val.ID);
            });
            userInstance.selectRows(popupUser_Table, true);

            $('#myModal_UserAuthorization').modal('hide');
            $('body').removeClass('modal-open');
            $('.modal-backdrop').remove();
        });

        $("#docNumber").blur(function () {

            GetAuthorizationByDocNum($("#docNumber").val());

        });



    });


</script>
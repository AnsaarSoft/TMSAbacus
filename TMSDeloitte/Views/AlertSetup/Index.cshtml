@{
    ViewBag.Title = "Alert Setup";
}

<div class="pcoded-content">
    <div class="card p-20" style="min-height: 495px;">
        <!-- [ breadcrumb ] start -->
        <div class="page-header">
            <div class="page-block">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="page-header-title">
                            <h4> Alert Setup </h4>
                        </div>
                    </div>
                    <div class="col-md-6 text-md-right">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="#"> Administration </a></li>
                            <li class="breadcrumb-item"> Setup </li>
                            <li class="breadcrumb-item"> Alert Setup </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ breadcrumb ] end -->
        <!-- [ Main Content ] start -->
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="text-right">
                        <button id="new" class="plus-icon"> <i class="fas fa-plus-square"></i> </button>
                        <button id="find" class="find-icon" data-toggle="modal" onclick='GeneratePopupFindGrid();' data-target="#myModal_Find"> <i class="fas fa-search"></i> </button>
                        <button id="first" class="step-backword-icon"> <i class="fas fa-step-backward"></i></button>
                        <button id="previous" class="backword-icon"> <i class="fas fa-backward"></i> </button>
                        <button id="next" class="forward-icon"> <i class="fas fa-forward"></i> </button>
                        <button id="last" class="step-forward-icon"> <i class="fas fa-step-forward"></i></button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="alertName"> Alert Name </label>
                    <input type="text" class="form-control" id="alertName">
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="typeCost"> Document Number: </label>
                    <input type="text" class="form-control frm-cstm" id="docNumber" placeholder="DocNum" disabled="disabled">
                </div>
            </div>
           
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="alertName"> Query </label>
                    <textarea class="form-control" id="query" rows="1"></textarea>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label for="frequency"> Frequency </label>
                    <div class="row">
                        <div class="col-lg-2">
                            <label for="every"> Every </label>
                        </div>
                        <div class="col-lg-4">
                            <input type="number" class="form-control" id="frequency" value="1">
                        </div>
                        <div class="col-lg-6 pl-0">
                            <select class="form-control" id="frequencyType">
                                <option>Minutes</option>
                                <option>Hours</option>
                                <option>Days</option>
                                <option>Weeks</option>
                                <option>Months</option>
                                <option>One time</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group form-check mt-5">
                    <input type="checkbox" class="form-check-input" id="isActive">
                    <label class="form-check-label" for="exampleCheck1"> Active </label>
                </div>
            </div>
         
        </div>

        <div class="row">
            <div class="col-lg-12">
                <ul class="nav nav-tabs mb-3" id="myTab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active text-uppercase" id="user-tab" data-toggle="tab" href="#user" role="tab" aria-controls="user" aria-selected="true"> User </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-uppercase" id="group-tab" data-toggle="tab" href="#group" role="tab" aria-controls="group" aria-selected="false"> Group </a>
                    </li>
                </ul>
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="user" role="tabpanel" aria-labelledby="user-tab">
                        <div class="card-body pt-0 pb-0">
                            <div class="table-responsive">
                                <div id="gridContainer"></div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="group" role="tabpanel" aria-labelledby="group-tab">
                        <div class="card-body pt-0 pb-0">
                            <div class="table-responsive">
                                <div id="gridGroupContainer"></div>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>


        <div class="row">
            <div class="col-lg-12 text-right mt-3">
                <input type="button" value="Add & Update" id="add_update" class="btn btn-primary" />
                @{
                    TMSDeloitte.Models.UserSession sess = null;
                    if ((TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"] != null)
                    {
                        sess = (TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"];
                        if (sess.SessionUser.ISSUPER)
                        {
                            <button type="button" class="btn btn-success" data-toggle="modal" onclick='loadAuthLogData("/AlertSetup/GetLogByDocID");' data-target="#myLogModal">Show Log</button>
                        }

                        var menu = sess.pagelist.Where(x => x.ID == (int)TMSDeloitte.Helper.Enums.FormsName.TimeSheetPeriodSetup).FirstOrDefault();
                        if (menu != null)
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="@menu.Role">
                        }
                        else
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="-1">
                        }
                    }

                }


            </div>
        </div>

        <!-- [ Main Content ] end -->
    </div> <!-- [ Card Content ] end -->
</div>

<div id="myModal_Users" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
               
                <button type="button" class="close" data-dismiss="modal">×</button>
            </div>
            <div class="modal-body">
                <div id="userContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnOkUser" class="btn btn-primary">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="myModal_Find" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>

            </div>
            <div class="modal-body">
                <div id="FindContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnOk" class="btn btn-primary">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="myLogModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title">Log</h4>*@
                <button type="button" class="close" data-dismiss="modal">×</button>
            </div>

            <div class="modal-body">
                <h8>Alert Setup Log Table</h8>
                <div id="setupLogContainer"></div>
            </div>
            <div class="modal-body">
                <h8>User Log Table</h8>
                <div id="userLogContainer"></div>
            </div>
            <div class="modal-body">
                <h8>User Group Log Table</h8>
                <div id="userGroupContainer"></div>
            </div>

        </div>
    </div>
</div>


<script type="text/javascript">

    var AllEmployees;
    var GroupSetupList = [];
    var Table = [];
    var GroupTable = [];
    var serialNo = 0;
    var groupSerialNo = 0;
        var year = "";
        var DocNum = "";
        var DocId = 0;
        var DocIsDeleted = false;
        var allDocList = [];
        var index = 1;
        var popupFindInstance;
        var popupUserInstance;
        var isPageDataLoaded = false;

        function stopLoading() {
            if (isPageDataLoaded == false) {
                setTimeout(function () { stopLoading(); }, 500);
            }
            else {
                loadPanel.hide();
            }
        }

        function ValidateAuthorization() {
            var id = $("#AuthID").val();
            var isSuccess = false;

            if (id == -1)
                isSuccess = true;
            if (id == 2)
                isSuccess = true;

            if (isSuccess) {
                $("#add_update").remove();
                $("#gridContainer").dxDataGrid({ disabled: true });
            }
        }
    
        function GetSetupData() {
            loadPanel.show();
            var url = "/GroupSetup/GetGroupSetup";
            $.ajax({
                url: url,
                method: "GET",
                data: {},
                async: false,
            }).done(function (data) {
                AllEmployees = data.response;
                GroupSetupList = data.GroupSetup;
                loadPanel.hide();
            }).fail(function (data) {
                loadPanel.hide();
            });
        }

        function GetDocList() {
            var url = "/AlertSetup/GetDocList";
            $.ajax({
                url: url,
                method: "GET",
                data: {},
                async: false
            }).done(function (data) {
                allDocList = data.docList;

            }).fail(function (data) {
            });
        }

        function GenerateGrid(JSON_Response) {
            $("#gridContainer").dxDataGrid({
                dataSource: JSON_Response,
                keyExpr: "KEY",
                showBorders: true,
                columnAutoWidth: true,
                allowColumnResizing: true,
                allowColumnReordering: true,
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                paging: {
                    enabled: false
                },
                editing: {
                    mode: "batch",
                    allowUpdating: true,
                    allowDeleting: true,
                    allowAdding: true
                },
                columns: [
                     {
                         dataField: "ID",
                         visible: false
                     },
                     {
                         dataField: "AlertSetupTableID",
                         visible: false
                     },
                     {
                         dataField: "AlertSetupHeaderTableID",
                         visible: false
                     },
                    {
                        dataField: "SNO",
                        caption: "S.No",
                        dataType: "Number",
                        allowEditing: false,
                        width: "auto"
                    },
                     {
                         dataField: "USER_CODE",
                         caption: "User Code",
                         allowEditing: true,
                         setCellValue: function (rowData, value, currentRowData) {


                             debugger;
                             rowData.USER_CODE = value;
                             currentRowData.USER_CODE = value;

                             var SelectedEmp = AllEmployees.filter(x=>x.ID == value)[0];
                             if (SelectedEmp != undefined) {

                                 rowData.UserID = SelectedEmp.ID;

                                 //rowData.USER_CODE = SelectedEmp.ID;
                                 //currentRowData.USER_CODE = SelectedEmp.ID;

                             }



                         },

                         lookup: {
                             dataSource: AllEmployees,
                             valueExpr: "ID",
                             displayExpr: "EMPLOYEECODE",

                         }
                     },
                    {
                        caption: "User Name",
                        dataField: "USERNAME",
                        width: "140",
                        allowEditing: false,
                        customizeText: function (rowData) {
                            return rowData.value;
                        }
                    },
                    {
                        caption: "Branch",
                        dataField: "BRANCHNAME",
                        width: "100",
                        allowEditing: false,
                        customizeText: function (rowData) {
                            return rowData.value;
                        }
                    },
                    {
                        caption: "Designation",
                        dataField: "DESIGNATIONNAME",
                        width: "auto",
                        allowEditing: false,
                        customizeText: function (rowData) {
                            return rowData.value;
                        }
                    },
                    {
                        dataField: "DEPARTMENTNAME",
                        caption: "Department",
                        allowEditing: false,
                        customizeText: function (rowData) {
                            return rowData.value;
                        }
                    },
                    
                     {
                         dataField: "IsNotification",
                         caption: "Notification",
                         dataType: "boolean",
                         allowEditing: true
                     },
                     {
                         dataField: "IsEmail",
                         caption: "Email",
                         dataType: "boolean",
                         allowEditing: true
                     }
                ],
                onEditorPreparing: function (e) {

                },
                onEditorPrepared: function (e) {

                    if (e.dataField == "USER_CODE") {
                        $(e.editorElement).dxSelectBox("instance").on("valueChanged", function (args) {
                            var grid = $("#gridContainer").dxDataGrid("instance");
                            var index = e.row.rowIndex;
                            var SelectedEmp = AllEmployees.filter(x=>x.ID == args.value)[0];

                            if (SelectedEmp != null) {
                                grid.cellValue(index, "ID", SelectedEmp.ID);
                                grid.cellValue(index, "USER_CODE", SelectedEmp.EMPLOYEECODE);
                                grid.cellValue(index, "DEPARTMENTID", SelectedEmp.DEPARTMENTID);
                                grid.cellValue(index, "DEPARTMENTNAME", SelectedEmp.DEPARTMENTNAME);
                                grid.cellValue(index, "USERNAME", SelectedEmp.FULLNAME);
                                grid.cellValue(index, "DESIGNATIONID", SelectedEmp.DESIGNATIONID);
                                grid.cellValue(index, "DESIGNATIONNAME", SelectedEmp.DESIGNATIONNAME);
                                grid.cellValue(index, "BRANCHID", SelectedEmp.BRANCHID);
                                grid.cellValue(index, "BRANCHNAME", SelectedEmp.BRANCHNAME);
                            }

                        });
                    }
                },
                onEditingStart: function (e) {
                },
                onInitNewRow: function (e) {
                    e.data.ID = 0;
                    e.data.IsDeleted = false;
                    e.data.IsNotification = true;
                    e.data.IsEmail = true;
                    serialNo = serialNo + 1;
                    e.data.SNO = serialNo;
                    window.setTimeout(function () { e.component.cancelEditData(); }, 0)

                    GeneratePopupUserGrid();
                },
                onRowInserting: function (e) {
                    //serialNo = serialNo + 1;
                    e.data.SNO = serialNo;
                },
                onRowInserted: function (e) {
                    //if (Table.length == 0) {
                    var Details = {
                        KEY: e.data.KEY,
                        ID: e.data.ID,
                        SNO: e.data.SNO,
                        AlertSetupTableID: e.data.AlertSetupTableID,
                        AlertSetupHeaderTableID: e.data.AlertSetupHeaderTableID,
                        USER_CODE: '',
                        USERNAME: '',
                        BRANCHNAME: '',
                        DESIGNATIONNAME: '',
                        DEPARTMENTNAME: '',
                       
                        IsNotification: e.data.IsNotification,
                        IsEmail: e.data.IsEmail,
                        ISDELETED: false
                    };
                    Table.push(Details);
                    //let IfUserCodeExist = Table.filter(x=>x.USER_CODE == Details.USER_CODE)
                    //if (IfUserCodeExist.length == 0) {
                    //    Table.push(Details);
                    //}


                },
                onRowUpdating: function (e) {
                },
                onRowUpdated: function (e) {
                    $.each(Table, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.ID = e.data.ID;
                            val.IsNotification = e.data.IsNotification;
                            val.IsEmail = e.data.IsEmail;
                        }

                    });
                },
                onRowRemoving: function (e) {
                },
                onRowRemoved: function (e) {
                    $.each(Table, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.ISDELETED = true;
                        }
                    });
                }
            });
        }

        function GenerateGroupGrid(JSON_Response) {
            $("#gridGroupContainer").dxDataGrid({
                dataSource: JSON_Response,
                keyExpr: "KEY",
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                paging: {
                    enabled: false
                },
                editing: {
                    mode: "batch",
                    allowUpdating: true,
                    allowDeleting: true,
                    allowAdding: true
                },
                columns: [
                     {
                         dataField: "ID",
                         visible: false
                     },
                     {
                         dataField: "AlertSetupTableID",
                         visible: false
                     },
                     {
                         dataField: "AlertSetupHeaderTableID",
                         visible: false
                     }, 
                    {
                        dataField: "SNO",
                        caption: "S.No",
                        dataType: "Number",
                        allowEditing: false,
                    },
                     {
                         dataField: "GROUPCODE",
                         caption: "Group Code",
                         allowEditing: true,
                         setCellValue: function (rowData, value, currentRowData) {

                             rowData.GROUPCODE = value;
                             currentRowData.GROUPCODE = value;

                             rowData.GROUPCODE = value;

                             var SelectedGroup = GroupSetupList.filter(x=>x.ID == value)[0];
                             if (SelectedGroup != undefined) {

                                 rowData.ID = SelectedEmp.ID;

                                 rowData.GROUPNAME = SelectedGroup.GROUPNAME != "" ? SelectedGroup.GROUPNAME : 'N/A';
                             }



                         },

                         lookup: {
                             dataSource: GroupSetupList,
                             valueExpr: "GROUPCODE",
                             displayExpr: "GROUPNAME",

                         }
                     },
                    {
                        caption: "Group Name",
                        dataField: "GROUPNAME",
                        allowEditing: false,
                        customizeText: function (rowData) {
                            return rowData.value;
                        }
                    },
                     {
                         dataField: "IsNotification",
                         caption: "Notification",
                         dataType: "boolean",
                         allowEditing: true
                     },
                     {
                         dataField: "IsEmail",
                         caption: "Email",
                         dataType: "boolean",
                         allowEditing: true
                     }
                ],
                onEditorPreparing: function (e) {

                },
                onEditorPrepared: function (e) {

                    if (e.dataField == "GROUPCODE") {
                        $(e.editorElement).dxSelectBox("instance").on("valueChanged", function (args) {
                            var grid = $("#gridGroupContainer").dxDataGrid("instance");
                            var index = e.row.rowIndex;

                            var SelectedData = GroupSetupList.filter(x=>x.GROUPCODE == args.value)[0];

                            if (SelectedData != null) {
                                grid.cellValue(index, "ID", SelectedData.ID);
                                grid.cellValue(index, "GROUPCODE", SelectedData.GROUPCODE);
                                grid.cellValue(index, "GROUPNAME", SelectedData.GROUPNAME);
                            }

                        });
                    }
                },
                onEditingStart: function (e) {
                },
                onInitNewRow: function (e) {
                    e.data.ID = 0;
                    e.data.IsDeleted = false;
                    e.data.IsNotification = true;
                    e.data.IsEmail = true;
                    groupSerialNo = groupSerialNo + 1;
                    e.data.SNO = groupSerialNo;

                },
                onRowInserting: function (e) {
                    //groupSerialNo = groupSerialNo + 1;
                    e.data.SNO = groupSerialNo;
                },
                onRowInserted: function (e) {

                    //if (Table.length == 0) {
                    var Details = {
                        KEY: e.KEY,
                        ID: e.data.ID,
                        SNO: e.data.SNO,
                        AlertSetupTableID: e.data.AlertSetupTableID,
                        AlertSetupHeaderTableID: e.data.AlertSetupHeaderTableID,
                        IsNotification: e.data.IsNotification,
                        IsEmail: e.data.IsEmail,
                        ISDELETED: false
                    };
                    GroupTable.push(Details);
                    //let IfExist = GroupTable.filter(x=>x.USER_CODE == Details.USER_CODE)
                    //if (IfExist.length == 0) {
                    //    GroupTable.push(Details);
                    //}


                },
                onRowUpdating: function (e) {
                },
                onRowUpdated: function (e) {
                    $.each(GroupTable, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.IsNotification = e.data.IsNotification;
                            val.IsEmail = e.data.IsEmail;
                        }

                    });
                },
                onRowRemoving: function (e) {
                },
                onRowRemoved: function (e) {
                    $.each(GroupTable, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.ISDELETED = true;
                        }
                    });
                }
            });
        }

        function AddUpdate() {
            var notSaved = $('#gridContainer').dxDataGrid('instance').getController('editing').hasChanges();
            if (notSaved) {
                setTimeout(function () { AddUpdate(); }, 2000);
            }
            else
            {
                var notSavedGroupGrid = $('#gridGroupContainer').dxDataGrid('instance').getController('editing').hasChanges();

                if (notSavedGroupGrid) {
                    setTimeout(function () { AddUpdate(); }, 2000);
                }
                else {
                    if (Table.length == 0 && GroupTable.length == 0) {
                        loadPanel.hide();
                        AlertToast('error', "Please add atleast 1 User or Group!");
                        return;
                    }
                    //if (GroupTable.length == 0) {
                    //    loadPanel.hide();
                    //    AlertToast('error', "Please add atleast 1 Group!");
                    //    return;
                    //}
                    var alertSetupObj = {
                        ID: DocId,
                        DocNum: $("#docNumber").val(),
                        AlertName: $("#alertName").val(),
                        Query: $("#query").val(),
                        Frequency: $("#frequency").val(),
                        FrequencyType: $('#frequencyType').find(":selected").text(),
                        IsActive: $('#isActive').is(":checked")
                    };
                    var jsonData = JSON.stringify({
                        alertSetupObj: alertSetupObj,
                        userList: Table,
                        groupList: GroupTable
                    });

                    var url = "/AlertSetup/AddUpdateAlertSetup";
                    $.ajax({
                        type: "POST",
                        url: url,
                        contentType: 'application/json',
                        data: jsonData,
                        dataType: "json",
                        async: false,
                        success: function (response) {
                            loadPanel.hide();
                            if (response.Success) {
                                AlertToast('success', response.Message);
                                setTimeout(function () {
                                    window.location.reload();
                                }, 5000);
                            }
                            else {
                                AlertToast('error', response.Message);
                            }
                        },
                        error: function (response) {
                            console.log(response);
                            loadPanel.hide();
                        },
                        failure: function (response) {
                            console.log(response);
                            loadPanel.hide();
                        }

                    })
                }
                
            }
          
        }

        function GeneratePopupFindGrid() {
            loadPanel.show();
            var ur = "/AlertSetup/GetAllDocuments";
            $.ajax({
                url: ur,
                method: "GET",
                data: {},
                async: false,
            }).done(function (data) {
                var JSON_Response = JSON.parse(data.response.Data);
                popupFindInstance = $("#FindContainer").dxDataGrid({
                    dataSource: JSON_Response,
                    keyExpr: "DocNum",
                    paging: { pageSize: 10 },
                    columnAutoWidth: true,
                    pager: { showInfo: true },
                    allowColumnResizing: true,
                    allowColumnReordering: true,
                    showBorders: true,
                    showScrollbar: 'always',
                    filterRow: { visible: true },
                    scrolling: {
                        mode: "horizontal",
                        showScrollbar: 'always'
                    },
                    selection: {
                        mode: "single"
                    },
                    columns: [
                        {
                            dataField: "ID",
                            caption: "ID",
                            visible: false
                        },
                        {
                            dataField: "DocNum",
                            caption: "Document #"
                        },
                        {
                            dataField: "AlertName",
                            caption: "ALert Name"
                        },
                         {
                             dataField: "Query",
                             caption: "Query"
                         },
                         {
                             dataField: "Frequency",
                             caption: "Frequency"
                         },
                         {
                             dataField: "FrequencyType",
                             caption: "Frequency Type"
                         },
                        {
                            dataField: "CreatedDate",
                            caption: "Created Date"
                        }
                    ]
                }).dxDataGrid("instance");

                $("#select-all-mode").dxSelectBox({
                    dataSource: ["allPages", "page"],
                    value: "allPages",
                    onValueChanged: function (data) {
                        dataGrid.option("selection.selectAllMode", data.value);
                    }
                });

                $("#show-checkboxes-mode").dxSelectBox({
                    dataSource: ["none", "onClick", "onLongTap", "always"],
                    value: "onClick",
                    onValueChanged: function (data) {
                        dataGrid.option("selection.showCheckBoxesMode", data.value);
                        $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
                    }
                });

                popupFindInstance.clearSelection();

                loadPanel.hide();

            }).fail(function (data) {
                loadPanel.hide();
            });



        }

        function GetAlertSetupByDocNum(docNum) {
            loadPanel.show();
            Table = [];
            GroupTable = [];
            serialNo = 0;
            groupSerialNo = 0;
            var url = "/AlertSetup/GetAlertSetupByDocNum?docNum=" + docNum;
            $.ajax({
                url: url,
                method: "GET",
                data: {},
                async: false,
            }).done(function (data) {
                loadPanel.hide();
                $("#docNumber").val("");
               
                var JSON_Response = data;


                DocId = JSON_Response.AlertSetup.ID;
                DocNum = JSON_Response.AlertSetup.DocNum;

                $("#docNumber").val(DocNum);
                $("#alertName").val(JSON_Response.AlertSetup.AlertName);
                $("#query").val(JSON_Response.AlertSetup.Query);
                $("#frequency").val(JSON_Response.AlertSetup.Frequency);
                $("#frequencyType").val(JSON_Response.AlertSetup.FrequencyType);
                $("#isActive").prop("checked", JSON_Response.AlertSetup.IsActive);

                serialNo = JSON_Response.userList.length;
                groupSerialNo = JSON_Response.groupList.length;
               
                GenerateGrid(JSON_Response.userList);
                GenerateGroupGrid(JSON_Response.groupList);

                $.each(JSON_Response.userList, function (index, val) {

                    var Details = {
                        KEY: val.KEY,
                        ID: val.ID,
                        USER_CODE: val.ID,
                        SNO: val.SNO,
                        AlertSetupTableID: val.AlertSetupTableID,
                        AlertSetupHeaderTableID: val.AlertSetupHeaderTableID,
                        IsNotification: val.IsNotification,
                        IsEmail: val.IsEmail,
                        ISDELETED: val.ISDELETED
                    };
                    Table.push(Details);
                });

                $.each(JSON_Response.groupList, function (index, val) {

                    var Details = {
                        KEY: val.KEY,
                        ID: val.ID,
                        SNO: val.SNO,
                        AlertSetupTableID: val.AlertSetupTableID,
                        AlertSetupHeaderTableID: val.AlertSetupHeaderTableID,
                        IsNotification: val.IsNotification,
                        IsEmail: val.IsEmail,
                        ISDELETED: val.ISDELETED
                    };
                    GroupTable.push(Details);
                });

                $('#docNumber').prop("disabled", true);


            }).fail(function (data) {
                loadPanel.hide();
            });
        }

        function loadAuthLogData(url) {
            if (DocId != 0) {
                url = url + "?docID=" + DocId;

                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false,
                }).done(function (data) {
                    debugger;
                    $("#setupLogContainer").dxDataGrid({
                        dataSource: JSON.parse(data.dt_Setup.Data),
                        paging: { pageSize: 10 },
                        columnAutoWidth: true,
                        pager: { showInfo: true },
                        allowColumnResizing: true,
                        allowColumnReordering: true,
                        showBorders: true,
                        showScrollbar: 'always',
                        filterRow: { visible: true },
                        scrolling: {
                            mode: "horizontal",
                            showScrollbar: 'always'
                        },
                    });
                    $("#userLogContainer").dxDataGrid({
                        dataSource: JSON.parse(data.dt_User.Data),
                        paging: { pageSize: 10 },
                        columnAutoWidth: true,
                        pager: { showInfo: true },
                        allowColumnResizing: true,
                        allowColumnReordering: true,
                        showBorders: true,
                        showScrollbar: 'always',
                        filterRow: { visible: true },
                        scrolling: {
                            mode: "horizontal",
                            showScrollbar: 'always'
                        },
                    });
                    $("#userGroupContainer").dxDataGrid({
                        dataSource: JSON.parse(data.dt_Group.Data),
                        paging: { pageSize: 10 },
                        columnAutoWidth: true,
                        pager: { showInfo: true },
                        allowColumnResizing: true,
                        allowColumnReordering: true,
                        showBorders: true,
                        showScrollbar: 'always',
                        filterRow: { visible: true },
                        scrolling: {
                            mode: "horizontal",
                            showScrollbar: 'always'
                        },
                    });


                }).fail(function (data) {
                    console.log(data);
                });
            }



        }

        function GeneratePopupUserGrid() {
            loadPanel.show();

            popupUserInstance = $("#userContainer").dxDataGrid({
                dataSource: AllEmployees,
                keyExpr: "ID",
                paging: { pageSize: 10 },
                columnAutoWidth: true,
                pager: { showInfo: true },
                allowColumnResizing: true,
                allowColumnReordering: true,
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                selection: {
                    mode: "multiple",
                    showCheckBoxesMode: "always",
                    allowSelectAll: true,
                    selectAllMode: 'page'
                },
                columns: [
                    {
                        dataField: "EMPLOYEECODE",
                        caption: "User Code"
                    },
                    {
                        dataField: "FULLNAME",
                        caption: "User Name"
                    },
                    {
                        dataField: "DESIGNATIONNAME",
                        caption: "Designation"
                    },
                    {
                        dataField: "DEPARTMENTNAME",
                        caption: "Department"
                    },
                    {
                        dataField: "BRANCHNAME",
                        caption: "Branch"
                    }
                ]
            }).dxDataGrid("instance");

            $("#select-all-mode").dxSelectBox({
                dataSource: ["allPages", "page"],
                value: "allPages",
                onValueChanged: function (data) {
                    dataGrid.option("selection.selectAllMode", data.value);
                }
            });

            $("#show-checkboxes-mode").dxSelectBox({
                dataSource: ["none", "onClick", "onLongTap", "always"],
                value: "onClick",
                onValueChanged: function (data) {
                    dataGrid.option("selection.showCheckBoxesMode", data.value);
                    $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
                }
            });

            var popupUser_Table = [];
            var popupUsersList = Table;
            popupUserInstance.clearSelection();
            $.each(popupUsersList, function (index, val) {
                popupUser_Table.push(val.ID);
            });
            popupUserInstance.selectRows(popupUser_Table, true);

            loadPanel.hide();

            $('#myModal_Users').modal('show');
        }

        function uuidv4() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        console.log(uuidv4());
        $('document').ready(function () {
            loadPanel.show();
            setTimeout(function () { GetSetupData(); }, 100);
            stopLoading();
           

            GetDocList();
           
            ValidateAuthorization();
            GenerateGrid([]);
            GenerateGroupGrid([])
            $("#frequencyType").val("Minutes");
            $("#isActive").prop("checked", true);

            $('#frequencyType').on('change', function () {
                var min = 0;
                var max = 0;
                
                var frequencyType = this.value;
                $("#frequency").val(1);
                switch (frequencyType) {
                    case "Minutes":
                        min = 1;
                        max = 60;
                        break;
                    case "Hours":
                        min = 1;
                        max = 24;
                        break;
                    case "Days":
                        min = 1;
                        max = 365;
                        break;
                    case "weeks":
                        min = 1;
                        max = 7;
                        break;
                    case "Months":
                        min = 1;
                        max = 12;
                        break;
                    case "One time":
                        min = 1;
                        max = 1;
                        break;
                    default:
                        min = 0;
                        max = 0;
                }
                $("#frequency").attr({
                    "min": min,"max": max
                });
            });
            $('#add_update').click(function () {

                var isSuccess = true;
                var message = '';

                //var usersList = Table; //$("#gridContainer").dxDataGrid("getDataSource")._items;
               // var groupList = GroupTable;//$("#gridGroupContainer").dxDataGrid("getDataSource")._items;

                var alertSetupObj = {
                    ID: DocId,
                    DocNum: $("#docNumber").val(),
                    AlertName: $("#alertName").val(),
                    Query: $("#query").val(),
                    Frequency: $("#frequency").val(),
                    FrequencyType: $('#frequencyType').find(":selected").text(),
                    IsActive: $('#isActive').is(":checked")
                };
                if (alertSetupObj.AlertName == "") {
                    isSuccess = false;
                    message = 'Please enter valid name, ';
                }
                if (alertSetupObj.Query == "") {
                    isSuccess = false;
                    message = message + 'Please enter valid query, ';
                }
                if (alertSetupObj.Frequency == "0") {
                    isSuccess = false;
                    message = message + 'Please enter valid frequency, ';
                }
                //if (alertSetupObj.FrequencyType == "Select Type") {
                //    isSuccess = false;
                //    message = message + 'Please enter valid frequency type, ';
                //}
               
                
                if (isSuccess) {
                    loadPanel.show();
                    var gridContainer = $("#gridContainer").dxDataGrid("instance");
                    gridContainer.getController('validating').validate(true).done(function (result) {
                        if (result) {
                            gridContainer.saveEditData();
                        }
                        else {
                            loadPanel.hide();
                            AlertToast('error', "Please add valid user!");
                        }

                    });
                    var gridGroupContainer = $("#gridGroupContainer").dxDataGrid("instance");
                    gridGroupContainer.getController('validating').validate(true).done(function (result) {
                        if (result) {
                            gridGroupContainer.saveEditData();
                            setTimeout(function () { AddUpdate(); }, 2000);
                        }
                        else {
                            loadPanel.hide();
                            AlertToast('error', "Please add valid group!");
                        }

                    });


                   
                }
                else {
                    AlertToast('error', message);
                }



            });
            $('#new').click(function () {
                DocNum = "";
                DocId = 0;
                GenerateGrid([]);
                GenerateGroupGrid([])
                Table = [];
                GroupTable = [];
                $("#docNumber").val("");
                $("#alertName").val("");
                $("#query").val("");
                $("#frequency").val("1");
                $("#frequencyType").val("Minutes");
                $("#isActive").prop("checked", true);
                $('#docNumber').prop("disabled", true);
                serialNo = 0;
                groupSerialNo = 0;
            });
            $('#find').click(function () {
                $("#docNumber").val("");
                $('#docNumber').prop("disabled", false);
            });
            $('#first').click(function () {
                $('#docNumber').prop("disabled", true);
                index = 0;
                GetAlertSetupByDocNum(allDocList[index]);
            });
            $('#last').click(function () {
                $('#docNumber').prop("disabled", true);
                index = allDocList.length - 1;
                GetAlertSetupByDocNum(allDocList[index]);
            });
            $('#previous').click(function () {
                $('#docNumber').prop("disabled", true);
                if (index != 0)
                    index = index - 1;
                GetAlertSetupByDocNum(allDocList[index]);
            });
            $('#next').click(function () {
                $('#docNumber').prop("disabled", true);
                if (index < allDocList.length-1)
                    index = index + 1;

                GetAlertSetupByDocNum(allDocList[index]);
            });
            $('#btnOk').click(function () {
                var selectedRow = popupFindInstance.getSelectedRowsData();
                if (selectedRow.length > 0)
                {
                    GetAlertSetupByDocNum(selectedRow[0].DocNum);
                }
                $('#myModal_Find').modal('hide');
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();

            });
            $('#btnOkUser').click(function () {
                Table = [];
                var popupUsers = popupUserInstance.getSelectedRowsData();
                var sno = 0;

                $.each(popupUsers, function (index, val) {
                    var dataExist = Table.filter(x=>x.ID == val.ID);
                    if (dataExist.length == 0)
                    {
                        sno = sno + 1;
                        var Details = {
                            KEY: uuidv4(),
                            ID: val.ID,
                            SNO: sno,
                            AlertSetupTableID: 0,
                            AlertSetupHeaderTableID: 0,
                            USER_CODE: val.ID,
                            USERNAME: val.FULLNAME,
                            BRANCHNAME: val.BRANCHNAME,
                            DESIGNATIONNAME: val.DESIGNATIONNAME,
                            DEPARTMENTNAME: val.DEPARTMENTNAME,
                            IsNotification: true,
                            IsEmail: true,
                            ISDELETED: false
                        };
                        Table.push(Details);
                    }
                    
                });

                $('#myModal_Users').modal('hide');
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();

                GenerateGrid(Table);
            });
            $("#docNumber").blur(function () {

                GetAlertSetupByDocNum($("#docNumber").val());

            });
        });

</script>
@{
    ViewBag.Title = "Assignment Cost Setup";
}
<div class="pcoded-content">
    <div class="card p-20" style="min-height: 495px;">
        <!-- [ breadcrumb ] start -->
        <div class="page-header">
            <div class="page-block">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="page-header-title">
                            <h4> Assignment Cost Setup </h4>
                        </div>
                    </div>
                    <div class="col-md-6 text-md-right">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="#"> Administration </a></li>
                            <li class="breadcrumb-item"> Setup </li>
                            <li class="breadcrumb-item"> Assignment Cost Setup </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ breadcrumb ] end -->
        <!-- [ Main Content ] start -->
        @*<div class="row">
        <div class="col-lg-12">
            <div class="form-group">
                <div class="text-right">
                    <button id="new" class="plus-icon"> <i class="fas fa-plus-square"></i> </button>
                    <button id="find" class="find-icon"> <i class="fas fa-search"></i> </button>
                    <button id="first" class="step-backword-icon"> <i class="fas fa-step-backward"></i></button>
                    <button id="previous" class="backword-icon"> <i class="fas fa-backward"></i> </button>
                    <button id="next" class="forward-icon"> <i class="fas fa-forward"></i> </button>
                    <button id="last" class="step-forward-icon"> <i class="fas fa-step-forward"></i></button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">

        <div class="col-lg-6">
            <div class="form-group">
                <label for="typeCost"> Document Number: </label>
                <input type="text" class="form-control frm-cstm" id="docNumber" placeholder="DocNum" disabled="disabled">
            </div>
        </div>

    </div>
        *@

        <div class="row">
            <div class="col-lg-12">
                <div class="table-responsive">
                    <div id="gridContainer"></div>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-lg-12 text-right mt-3">
                <button type="button" id="add_update" class="btn btn-primary mr-2"> Add & Update </button>
                @{
                    TMSDeloitte.Models.UserSession sess = null;
                    if ((TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"] != null)
                    {
                        sess = (TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"];
                        if (sess.SessionUser.ISSUPER)
                        {
                            <button type="button" class="btn btn-success" data-toggle="modal" data-target="#myModal" onclick='loadData("/AssignmentCostSetup/GetAssignmentCostSetupLog");'> Show Log </button>
                        }

                        var menu = sess.pagelist.Where(x => x.ID == (int)TMSDeloitte.Helper.Enums.FormsName.AssignmentCostSetup).FirstOrDefault();
                        if (menu != null)
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="@menu.Role">
                        }
                        else
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="-1">
                        }
                    }

                }
                
            </div>
        </div>

        <!-- [ Main Content ] end -->
    </div> <!-- [ Card Content ] end -->
</div>

<script type="text/javascript">

    var Table = [];
    var serialNo = 0;

    function GenerateGrid(JSON_Response)
    {
        $(function () {
            $("#gridContainer").dxDataGrid({
                dataSource: JSON_Response,
                keyExpr: "KEY",
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                paging: {
                    enabled: false
                },
                editing: {
                    mode: "batch",
                    allowUpdating: true,
                    allowDeleting: true,
                    allowAdding: true
                },
                columns: [
                     {
                         dataField: "ID",
                         caption: "ID",
                         allowEditing: false,
                         visible: false
                     },
                    {
                        dataField: "SNO",
                        caption: "S.No",
                        dataType: "Number",
                        allowEditing: false,
                        width: 120
                    },
                    {
                        caption: "Type of Cost",
                        dataField: "TYPEOFCOST",
                        validationRules: [{ type: "required" }],
                    },
                    {
                        dataField: "ISACTIVE",
                        caption: "Active",
                        dataType: "boolean"
                    },
                     {
                         dataField: "ISDELETED",
                         caption: "Deleted",
                         dataType: "bool",
                         visible: false,
                         allowEditing: false
                     }
                ],
                onEditorPreparing: function(e) {  
                    if (e.parentType == 'dataRow' && e.dataField == 'TYPEOFCOST') {
                        e.editorOptions.maxLength = 100;  
                    }  
                }, 
                onEditingStart: function (e) {
                },
                onInitNewRow: function (e) {
                    serialNo = serialNo + 1;
                    e.data.SNO = serialNo;
                    e.data.ID = 0;
                    e.data.ISDELETED = false;
                    e.data.ISACTIVE = true;
                    
                },
                onRowInserting: function (e) {
                    serialNo = serialNo + 1;
                    e.data.SNO = serialNo ;
                },
                onRowInserted: function (e) {
                    var Details = {
                        KEY: e.key,
                        ID: 0,
                        SNO: e.data.SNO,
                        TYPEOFCOST: e.data.TYPEOFCOST,
                        ISACTIVE: e.data.ISACTIVE,
                        ISDELETED: false
                    };
                    Table.push(Details);
                },
                onRowUpdating: function (e) {
                },
                onRowUpdated: function (e) {
                    $.each(Table, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.TYPEOFCOST = e.data.TYPEOFCOST;
                            val.ISACTIVE = e.data.ISACTIVE;
                        }

                    });
                },
                onRowRemoving: function (e) {
                },
                onRowRemoved: function (e) {
                    $.each(Table, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.ISDELETED = true;
                        }
                    });
                }
            });
           
        });
    }

    function GetAllAssignmentCostSetup() {
        loadPanel.show();
        var url = "/AssignmentCostSetup/GetAllAssignmentCostSetup";
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {
            var JSON_Response = data.response;
            GenerateGrid(JSON_Response);
            $.each(JSON_Response, function (index, val) {
                var Details = {
                    KEY: val.KEY,
                    ID: val.ID,
                    SNO: val.SNO,
                    TYPEOFCOST: val.TYPEOFCOST,
                    ISACTIVE: val.ISACTIVE,
                    ISDELETED: val.ISDELETED
                };
                Table.push(Details);
                serialNo = Table.length;
            });
            loadPanel.hide();
        }).fail(function (data) {
            loadPanel.hide();
        });
    }

    function ValidateAuthorization() {
        var id = $("#AuthID").val();
        var isSuccess = false;

        if (id == -1)
            isSuccess = true;
        if (id == 2)
            isSuccess = true;

        if (isSuccess) {
            $("#add_update").remove();
            $("#gridContainer").dxDataGrid({ disabled: true });
        }
    }

    function AddUpdate() {

        var notSaved = $('#gridContainer').dxDataGrid('instance').getController('editing').hasChanges();
        if (notSaved)
            setTimeout(function () { AddUpdate(); }, 2000);
        else {
            if (Table.length > 0) {

                loadPanel.show();
                var url = "/AssignmentCostSetup/AddUpdateAssignmentCostSetup";
                $.ajax({
                    type: "POST",
                    url: url,
                    contentType: 'application/json',
                    data: JSON.stringify(Table),
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        loadPanel.hide();
                        if (response.Success) {
                            AlertToast('success', response.Message);
                            setTimeout(function () {
                                window.location.reload();
                            }, 5000);
                        }
                        else
                            AlertToast('error', response.Message);
                    },
                    error: function (response) {
                        console.log(response);
                        loadPanel.hide();
                    },
                    failure: function (response) {
                        console.log(response);
                        loadPanel.hide();
                    }

                })
            }
            else {
                AlertToast('error', "Please add atleast one record");
            }

        }
            }

    $('document').ready(function () {
        GetAllAssignmentCostSetup();
        ValidateAuthorization();

        $('#add_update').click(function () {
            loadPanel.show();
            var gridContainer = $("#gridContainer").dxDataGrid("instance");
            gridContainer.getController('validating').validate(true).done(function (result) {
                if (result) {
                    gridContainer.saveEditData();
                    setTimeout(function () { AddUpdate(); }, 2000);
                }
                else {
                    loadPanel.hide();
                    AlertToast('error', "Please fill required fields!");
                }

            });
        });

    });

</script>
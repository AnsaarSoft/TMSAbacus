
@{
    ViewBag.Title = "TravelLocation";
}
<div class="pcoded-content">
    <div class="card p-20" style="min-height: 495px;">
        <!-- [ breadcrumb ] start -->
        <div class="page-header">
            <div class="page-block">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="page-header-title">
                            <h4> Travel Location Setup</h4>
                        </div>
                    </div>
                    <div class="col-md-6 text-md-right">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="#"> Administration </a></li>
                            <li class="breadcrumb-item"> Setup </li>
                            <li class="breadcrumb-item"> Travel Location Setup</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ breadcrumb ] end -->
        <!-- [ Main Content ] start -->
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="text-right">
                        <button id="new" class="plus-icon"> <i class="fas fa-plus-square"></i> </button>
                        @*<button id="find" class="find-icon"> <i class="fas fa-search"></i> </button>*@
                        <button id="find" class="find-icon" data-toggle="modal" onclick='GeneratePopupFindGrid();' data-target="#myModal_Find"> <i class="fas fa-search"></i> </button>
                        <button id="first" class="step-backword-icon"> <i class="fas fa-step-backward"></i></button>
                        <button id="previous" class="backword-icon"> <i class="fas fa-backward"></i> </button>
                        <button id="next" class="forward-icon"> <i class="fas fa-forward"></i> </button>
                        <button id="last" class="step-forward-icon"> <i class="fas fa-step-forward"></i></button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="exampleFormControlSelect1"> Branch </label>
                    <div id="sapBranch" class="form-control frm-cstm"></div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="exampleFormControlSelect1"> Client Name </label>
                    <div id="sapClient" class="form-control frm-cstm"></div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="typeCost"> Document Number: </label>
                    <input type="text" class="form-control frm-cstm" id="docNumber" placeholder="DocNum" disabled="disabled">
                </div>
            </div>

        </div>


        <div class="row">
            <div class="col-lg-12">
                <div class="table-responsive">
                    <div id="gridContainer"></div>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-lg-12 text-right mt-3">
                <button type="button" id="add_update" class="btn btn-primary mr-2"> Add & Update </button>
                @*<button type="button" class="btn btn-success" data-toggle="modal" data-target="#myModal" onclick='GetLogData("/TravelLocation/GetTravelLocationLog?docNum=" + DocNum);'> Show Log </button>*@

                @{
        TMSDeloitte.Models.UserSession sess = null;
        if ((TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"] != null)
        {
            sess = (TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"];
            if (sess.SessionUser.ISSUPER)
            {
                <button type="button" class="btn btn-success" data-toggle="modal" data-target="#myModal" onclick='GetLogData("/TravelLocation/GetTravelLocationLog?docNum=" + DocNum);'> Show Log </button>
            }

            var menu = sess.pagelist.Where(x => x.ID == (int)TMSDeloitte.Helper.Enums.FormsName.TravelLocationSetup).FirstOrDefault();
            if (menu != null)
            {
                <input type="hidden" id="AuthID" name="AuthID" value="@menu.Role">
            }
            else
            {
                <input type="hidden" id="AuthID" name="AuthID" value="-1">
            }
        }

    }


            </div>
        </div>

        <!-- [ Main Content ] end -->
    </div> <!-- [ Card Content ] end -->
</div>

<div id="myModal_Find" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>

            </div>
            <div class="modal-body">
                <div id="FindContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnOk" class="btn btn-primary">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    var Task = {};

    var Table = [];
    var TravellocationList = [];

    var serialNo = 0;
    index = 0;
    var DocNum = "";
//    var allDocList = [];
    var BRANCHID = 0;
    var CLIENTNAME = '';
    var CLIENTID = 0;

    var productsDataSource = null;

    $('#docNumber').prop("disabled", true);

    function GeneratesapBranchDropDown(jsonResponse) {
        $("#sapBranch").dxSelectBox({
            cacheEnabled: false,
            items: jsonResponse,
            displayExpr: "BranchName",
            valueExpr: "BranchID",
            placeholder: "Select Branch...",
            cssclass: "form-control frm-cstm",
            searchEnabled: true,
            readonly: false,
            onValueChanged: function (data) {
                var val = data.value;
                BRANCHID = val;
                DocNum = "";
                Table = [];

                GenerateGrid(Table);

                $("#docNumber").val(-1);

                //$("#sapClient").dxSelectBox({
                //    value: DocNum
                //});

                getFilteredData(val, 'CLIENTNAME', null);

            }
        });
    }

    function GeneratesapClientDropDown(jsonResponse) {
        $("#sapClient").dxSelectBox({
            cacheEnabled: false,
            items: jsonResponse,
            displayExpr: "CLIENTNAME",
            valueExpr: "CLIENTID",
            placeholder: "Select Client...",
            cssclass: "form-control frm-cstm",
            searchEnabled: true,
            readonly: false,
            onValueChanged: function (data) {
                var val = data.value;
                CLIENTNAME = val;
                DocNum = "";
                Table = [];
                serialNo = 0;
                getFilteredData(val, 'CLIENTNAME', null);

            }
        });
    }
    var SAPBranches;
    var Clients;
    function GetsapBranch() {
        var url = "/TravelLocation/GetsapFunctions";
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {
            SAPBranches = data.response;
            allDocList = data.DocList;
            Clients = data.Clients;
            GeneratesapBranchDropDown(SAPBranches);
            GeneratesapClientDropDown(Clients);

        }).fail(function (data) {
        });
    }


    function GenerateGrid(JSON_Response) {
        $(function () {
            $("#gridContainer").dxDataGrid({
                dataSource: JSON_Response,
                keyExpr: "KEY",
                columnAutoWidth: true,
                allowColumnResizing: true,
                allowColumnReordering: true,
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                paging: {
                    enabled: false
                },
                editing: {
                    mode: "batch",
                    allowUpdating: true,
                    allowDeleting: true,
                    allowAdding: true
                },
                columns: [
                     {
                         dataField: "ID",
                         caption: "ID",
                         width: "auto",
                         allowEditing: false,
                         visible: false
                     },
                    {
                        dataField: "SNO",
                        caption: "S.No",
                        dataType: "Number",
                        allowEditing: false,
                        width: "100"
                    },
                    {
                        caption: "Location",
                        dataField: "LOCATION",
                        validationRules: [{ type: "required" }],
                        //width: "100"
                    },
                    {
                        caption: "K.M",
                        dataField: "KM",
                        validationRules: [{ type: "required" }],
                       // width: "100"
                    },
                    {
                        dataField: "ISACTIVE",
                        caption: "Active",
                        dataType: "boolean",
                       // width: "auto"
                    },
                     {
                         dataField: "ISDELETED",
                         caption: "Deleted",
                         dataType: "bool",
                         visible: false,
                         allowEditing: false,
                         //width: "auto"
                     }
                ],
                onEditorPreparing: function (e) {
                    if (e.parentType == 'dataRow' && e.dataField == 'KM' && e.dataField == 'LOCATION') {
                        e.editorOptions.maxLength = 100;
                    }
                   
                },
                onEditingStart: function (e) {
                    //if (e.data.ID == 0 && e.data.LOCATION) {
                    //    var CheckDuplicateRecord = TravellocationList.filter(x=>x.CLIENTNAME == CLIENTNAME && x.BRANCHID == BRANCHID && x.LOCATION == e.data.LOCATION);
                    //    if (CheckDuplicateRecord.length > 0) {
                    //        e.data.LOCATION = null;
                    //        //e.data.LOCATION = undefined;
                    //    }

                    //}
                },
                onEditorPrepared: function (e) {
                  
                    //if (e.row && e.row.data && e.row.data.ID == 0 && e.row.data.LOCATION) {
                    //    var CheckDuplicateRecord = TravellocationList.filter(x=>x.CLIENTNAME == CLIENTNAME && x.BRANCHID == BRANCHID && x.LOCATION == e.row.data.LOCATION);
                    //    if (CheckDuplicateRecord.length > 0) {
                    //        AlertToast('error', e.row.data.LOCATION + " Already Exists");
                    //        e.row.data.LOCATION = null;
                    //    }

                    //    var CheckDuplicateRecord1 = Table.filter(x=>x.CLIENTNAME == CLIENTNAME && x.BRANCHID == BRANCHID && x.LOCATION == e.row.data.LOCATION);
                    //    if (CheckDuplicateRecord1.length > 0) {
                    //        AlertToast('error', e.row.data.LOCATION + " Already Exists");
                    //        e.row.data.LOCATION = null;
                    //    }

                    //}
                },
                onInitNewRow: function (e) {
                    serialNo = serialNo + 1;
                    e.data.SNO = serialNo;
                    e.data.ID = 0;
                    e.data.ISDELETED = false;
                    e.data.ISACTIVE = true;

                },
                onRowInserting: function (e) {
                   
                },
                onRowInserted: function (e) {
                    if (Table.length==0) {
                        var Details = {
                            KEY: e.key,
                            ID: 0,
                            SNO: e.data.SNO,
                            LOCATION: e.data.LOCATION,
                            KM: e.data.KM,
                            BRANCHID: BRANCHID,
                            BRANCHNAME: '',
                            CLIENTID: 0,
                            CLIENTNAME: CLIENTID,
                            ISACTIVE: e.data.ISACTIVE,
                            ISDELETED: false
                        };
                        Table.push(Details);
                    }
                    else {
                        Table.forEach(function (obj) {
                            if (obj.ID == 0 && BRANCHID != undefined && CLIENTNAME != undefined) {
                                obj.BRANCHID = BRANCHID;
                                obj.BRANCHNAME = '';
                                obj.CLIENTID = 0;
                                obj.CLIENTNAME = CLIENTNAME;
                                obj.DOCNUM = DocNum == undefined ? '' : DocNum;
                            }
                        })

                    }


                },
                onRowUpdating: function (e) {
                },
                onRowUpdated: function (e) {
                    $.each(Table, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.KM = e.data.KM;
                            val.LOCATION = e.data.LOCATION;
                            val.BRANCHID = e.data.BRANCHID;
                            val.CLIENTID = e.data.CLIENTID;
                            val.ISACTIVE = e.data.ISACTIVE;
                        }

                    });
                },
                onRowRemoving: function (e) {
                },
                onRowRemoved: function (e) {
                    $.each(Table, function (index, val) {
                        if (val.KEY == e.data.KEY) {
                            val.ISDELETED = true;
                        }
                    });
                }
            });

        });
    }

    function GetTravel_Location() {
        var url = "/TravelLocation/GetTravelLocation";
        $.ajax({
            url: url,
            method: "GET",
            data: {},
            async: false,
        }).done(function (data) {
            TravellocationList = data.response;
            var abc = [];
            GenerateGrid(abc);

            Table = TravellocationList;
        }).fail(function (data) {
        });
    }

    function ValidateAuthorization() {
        var id = $("#AuthID").val();
        if (id != -1) {
            if (id == 2) {
                $("#add_update").remove();
                $("#gridContainer").dxDataGrid({ disabled: true });

            }
        }
    }

    function AddUpdate() {
        var notSaved = $('#gridContainer').dxDataGrid('instance').getController('editing').hasChanges();
        if (notSaved)
            setTimeout(function () { AddUpdate(); }, 2000);

        else {
            if (Table.length > 0) {

                if (!BRANCHID) {
                    AlertToast('error', "Please select Branch");
                    return;
                }
                if (!CLIENTNAME) {
                    AlertToast('error', "Please select Client Name");
                    return;
                }
                
                var url = "/TravelLocation/AddUpdateGetTravelLocation";
                $.ajax({
                    type: "POST",
                    url: url,
                    contentType: 'application/json',
                    data: JSON.stringify(Table),
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        if (response.Success) {
                            AlertToast('success', response.Message);
                            setTimeout(function () {
                                window.location.reload();
                            }, 5000);
                            GetTravel_Location();
                        }
                        else {
                            AlertToast('error', response.Message);
                        }
                        loadPanel.hide();
                    },
                    error: function (response) {
                        console.log(response);
                        loadPanel.hide();
                    },
                    failure: function (response) {
                        console.log(response);
                        loadPanel.hide();
                    }

                })
            }
            else {
                AlertToast('error', "Please add atleast one record");
                loadPanel.hide();
            }
        }
    }
    $('document').ready(function () {
        GetsapBranch();
        GetTravel_Location();
        
        ValidateAuthorization();
        $('#add_update').click(function () {
            if (!BRANCHID) {
                AlertToast('error', "Please select branch!");
                return;
            }
            if (!CLIENTNAME) {
                AlertToast('error', "Please select client name!");
                return;
            }

            var gridContainer = $("#gridContainer").dxDataGrid("instance");
            loadPanel.show();
            gridContainer.getController('validating').validate(true).done(function (result) {
                if (result) {
                    gridContainer.saveEditData();
                    setTimeout(function () { AddUpdate(); }, 2000);
                }
                else {
                    loadPanel.hide();
                    AlertToast('error', "Please fill required fields!");
                }
               
            });
        });


    });

    $("#docNumber").blur(function () {
        var DN = $("#docNumber").val()
        if (DN) {
            Table = TravellocationList.filter(x=>x.DOCNUM == DN);

        } else {
            Table = TravellocationList;
        }

        GenerateGrid(Table);
        //GetMaster_TaskByDocNum($("#docNumber").val());
    });


    $('#new').click(function () {

        $("#docNumber").val("");
        $('#docNumber').prop("disabled", true);
        GenerateGrid(null);
        $("#sapBranch").dxSelectBox({ value: -1 });

        $("#sapClient").dxSelectBox({value: -1});
    });
    $('#find').click(function () {
        $("#docNumber").val("");
        $('#docNumber').prop("disabled", false);

    });
    $('#first').click(function () {
        $('#docNumber').prop("disabled", true);
        getFilteredData($("#docNumber").val(), 'DOCNUM', 'first');
    });
    $('#last').click(function () {

        $('#docNumber').prop("disabled", true);
        getFilteredData($("#docNumber").val(), 'DOCNUM', 'last');
    });
    $('#previous').click(function () {
        $('#docNumber').prop("disabled", true);
        getFilteredData($("#docNumber").val(), 'DOCNUM', 'previous');
    });
    $('#next').click(function () {
        $('#docNumber').prop("disabled", true);
        getFilteredData($("#docNumber").val(), 'DOCNUM','next');

    });


    function getFilteredData(id, type, Action) {
        idCopy = id;
        var TravellocationListCopy = [];
        if (type == 'CLIENTNAME') {
            if (CLIENTNAME != '' && BRANCHID != 0) {
                Table = TravellocationList.filter(x=>x.CLIENTNAME == CLIENTNAME && x.BRANCHID == BRANCHID);

            }
        }
        else if (type == 'DOCNUM') {
            let DocNum = '';
            if (Action == 'next') {

                let l1 = TravellocationList.map(m=> { return m.DOCNUM });
                l1 = l1.sort();

                var unique = l1.filter((v, i, a) => a.indexOf(v) === i);

                id = TravellocationList.filter(x=>x.DOCNUM == unique[unique.length - 1]);

                if ($("#docNumber").val() == "") {
                    DocNum = unique[0];
                    id = DocNum;
                }
                else {
                    DocNum = $("#docNumber").val().substr(4, $("#docNumber").val().length);
                    DocNum = parseInt(DocNum) + 1;
                    DocNum = DocNum.toString();
                    DocNum = 'Doc-' + DocNum.padStart(5, '0');
                    id = DocNum;
                }

            }
            else if (Action == 'previous') {
                if ($("#docNumber").val() == "") {
                    id = TravellocationList[0].DOCNUM;

                }
                else {
                    DocNum = id.substr(4, id.length);
                    DocNum = parseInt(DocNum) - 1;
                    DocNum = DocNum.toString();
                    DocNum = 'Doc-' + DocNum.padStart(5, '0');
                    id = DocNum;
                }

                if (id == "") {
                    console.log("null id");
                    TravellocationListCopy = TravellocationList;
                    id = TravellocationListCopy.pop();

                }
            }

            else if (Action == 'last') {
                let l1 = TravellocationList.map(m=> { return m.DOCNUM });
                l1 = l1.sort();

                var unique = l1.filter((v, i, a) => a.indexOf(v) === i);

                id = TravellocationList.filter(x=>x.DOCNUM == unique[unique.length-1]);
                if (id.length>0) {
                    id = id[0].DOCNUM;
                }
            }

            else if (Action == 'first') {
                id = TravellocationList[0].DOCNUM;

                if (id == "") {
                    console.log("null id");
                }
            }

            Table = TravellocationList.filter(x=>x.DOCNUM == id);
            if (Table.length==0) {
                Table = TravellocationList.filter(x=>x.DOCNUM == idCopy);
            }
        }


        GenerateGrid(Table);

        if (Table.length > 0) {
            DocNum = Table[0].DOCNUM;
            BRANCHID = Table[0].BRANCHID;
            CLIENTNAME = Table[0].CLIENTNAME;
        }
        serialNo = Table.length;
        $("#sapBranch").dxSelectBox({
            value: BRANCHID
        });

        $("#sapClient").dxSelectBox({
            value: CLIENTNAME
        });

        $('#docNumber').prop("disabled", true);
        if (DocNum != undefined) {
            $("#docNumber").val(DocNum);
        }
    }

    function GetLogData(name) {
        loadData("/TravelLocation/GetTravelLocationLog?docNum=" + DocNum);
    }

    function GeneratePopupFindGrid() {
        loadPanel.show();
        var ur = "/TravelLocation/GetTravel_LocationAllDocuments";
        $.ajax({
            url: ur,
            method: "GET",
            data: {},
        }).done(function (data) {
            var JSON_Response = JSON.parse(data.response.Data);
            popupFindInstance = $("#FindContainer").dxDataGrid({
                dataSource: JSON_Response,
                keyExpr: "DOCNUM",
                paging: { pageSize: 10 },
                columnAutoWidth: true,
                pager: { showInfo: true },
                allowColumnResizing: true,
                allowColumnReordering: true,
                showBorders: true,
                showScrollbar: 'always',
                filterRow: { visible: true },
                scrolling: {
                    mode: "horizontal",
                    showScrollbar: 'always'
                },
                selection: {
                    mode: "single"
                },
                columns: [
                    {
                        dataField: "DOCNUM",
                        caption: "Document #"
                    },
                    {
                        dataField: "BRANCHID",
                        visible: false
                    },
                     {
                         dataField: "BRANCHID",
                         caption: "Branch",
                         setCellValue: function (rowData, value, currentRowData) {
                             rowData.Authorization = value;
                             currentRowData.Authorization = value;
                         },
                         lookup: {
                             dataSource: SAPBranches,
                             valueExpr: "BranchID",
                             displayExpr: "BranchName"
                         }
                     },
                    {
                        dataField: "CLIENTNAME",
                        visible: false
                    },
                     {
                         dataField: "CLIENTNAME",
                         caption: "Client",
                         setCellValue: function (rowData, value, currentRowData) {
                             rowData.Authorization = value;
                             currentRowData.Authorization = value;
                         },
                         lookup: {
                             dataSource: Clients,
                             valueExpr: "CLIENTID",
                             displayExpr: "CLIENTNAME"
                         }
                     },

                    {
                        dataField: "CreatedDate",
                        caption: "Created Date"
                    }
                ]
            }).dxDataGrid("instance");

            $("#select-all-mode").dxSelectBox({
                dataSource: ["allPages", "page"],
                value: "allPages",
                onValueChanged: function (data) {
                    dataGrid.option("selection.selectAllMode", data.value);
                }
            });

            $("#show-checkboxes-mode").dxSelectBox({
                dataSource: ["none", "onClick", "onLongTap", "always"],
                value: "onClick",
                onValueChanged: function (data) {
                    dataGrid.option("selection.showCheckBoxesMode", data.value);
                    $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
                }
            });

            popupFindInstance.clearSelection();

            loadPanel.hide();

        }).fail(function (data) {
            console.log(data);
            loadPanel.hide();
        });

    }

    $('#btnOk').click(function () {
        var selectedRow = popupFindInstance.getSelectedRowsData();
        if (selectedRow.length > 0) {
            $("#sapBranch").dxSelectBox({ value: selectedRow[0].BRANCHID });
            $("#sapClient").dxSelectBox({ value: selectedRow[0].CLIENTNAME });
        }
        $('#myModal_Find').modal('hide');
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();

    });


</script>



@{
    ViewBag.Title = "Time Sheet Form";


}


@Html.Hidden("DocNum", (object)ViewBag.DocNum)
@Html.Hidden("EmployeeID", (object)ViewBag.EmpID)
@Html.Hidden("isView", (object)ViewBag.isView)

@Html.Hidden("EmpID", 0)
@Html.Hidden("BranchID",0)

<div class="pcoded-content">
    <div class="card p-20" style="min-height: 495px;">
        <!-- [ breadcrumb ] start -->
        <div class="page-header">
            <div class="page-block">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="page-header-title">
                            <h4> Time Sheet Form </h4>
                        </div>
                    </div>
                    <div class="col-md-6 text-md-right">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="#"> Time Sheet Management </a></li>
                            <li class="breadcrumb-item"> Time Sheet Form </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ breadcrumb ] end -->
        <!-- [ Main Content ] start -->
        <div class="row" id="topButton">
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="text-right">
                        <button id="new" class="plus-icon"> <i class="fas fa-plus-square"></i> </button>
                        <button id="find" class="find-icon" data-toggle="modal" onclick='GeneratePopupFindGrid();' data-target="#myModal_Find"> <i class="fas fa-search"></i> </button>
                        <button id="first" class="step-backword-icon"> <i class="fas fa-step-backward"></i></button>
                        <button id="previous" class="backword-icon"> <i class="fas fa-backward"></i> </button>
                        <button id="next" class="forward-icon"> <i class="fas fa-forward"></i> </button>
                        <button id="last" class="step-forward-icon"> <i class="fas fa-step-forward"></i></button>
                    </div>
                </div>
            </div>
        </div>
        <input type="text" class="form-control frm-cstm" id="nonChargeableHours" placeholder="Non Chargeable Hours" readonly style="display:none" />
        <input type="text" class="form-control frm-cstm" id="chargeableHours" placeholder="Chargeable Hours" readonly style="display:none" />    
        <input type="text" class="form-control frm-cstm" id="overTimeHours" placeholder="Over Time Hours" readonly style="display:none" />
        <input type="text" class="form-control frm-cstm" id="standardHours" placeholder="Standard Hours" readonly style="display:none"/>
        <input type="text" class="form-control frm-cstm" id="totalHoursWorked" placeholder="Total Hours Worked" readonly style="display:none" />
      <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="exampleFormControlSelect1"> Employee Code: </label>
                    <input type="text" class="form-control frm-cstm" id="employeeCode" placeholder="Employee Code" readonly />
                    @*<div id="empGridBox" class="form-control frm-cstm"></div>*@
                </div>
            </div>

            <div class="col-lg-3">
                <div class="form-group">
                    <label for="typeCost"> Document Status: </label>
                    <input type="text" class="form-control frm-cstm" id="docStatus" placeholder="Document Status" disabled="disabled">
                </div>
            </div>

            <div class="col-lg-3">
                <div class="form-group">
                    <label for="typeCost"> Document Number: </label>
                    <input type="text" class="form-control frm-cstm" id="docNumber" placeholder="DocNum" disabled="disabled">
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group mt-4">
                    <label for="exampleFormControlSelect1">Employee Name: </label>
                    <input type="text" class="form-control frm-cstm" id="employeeName" placeholder="Employee Name" readonly />
                </div>

                <div class="form-group mt-4">
                    <label for="exampleFormControlSelect1"> Year: </label>
                    <div id="yearDropDown" class="form-control frm-cstm"></div>
                </div>

                <div class="form-group mt-4">
                    <label for="exampleFormControlSelect1">Period: </label>
                    <div id="period" class="form-control frm-cstm"></div>
                </div>
            </div>

            <div class="col-lg-6" style="margin-top: 30px;">
                <div class="table-responsive">
                    <div id="gridViewContainer"></div>
                </div>
            </div>
         
        </div>
       
        <div class="row mt-1" id="EmpLeaveStatus">
            <div class="col-lg-3">
                <div class="form-group">
                    <label for="typeCost"> Total Allowed: </label>
                    <input type="text" class="form-control frm-cstm" id="TotalAllowed" placeholder="Total Allowed" disabled="disabled">
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    <label for="typeCost"> Balance: </label>
                    <input type="text" class="form-control frm-cstm" id="Balance" placeholder="Balance" disabled="disabled">
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    <label for="typeCost"> Used: </label>
                    <input type="text" class="form-control frm-cstm" id="UseD" placeholder="Used" disabled="disabled">
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    <label for="typeCost"> Carry Forward: </label>
                    <input type="text" class="form-control frm-cstm" id="CarryForward" placeholder="Carry Forward" disabled="disabled">
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 mt-4">
                <div class="table-responsive">
                    <div id="gridContainerTimeSheet"></div>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-lg-12 text-right mt-3">
                <input type="button" value="Copy From" id="copyFrom" class="btn btn-primary" />
                <input type="button" value="Save" id="save" class="btn btn-success" />
                <input type="button" value="Submit" id="submit" class="btn btn-primary" />
                @{
                    TMSDeloitte.Models.UserSession sess = null;
                    if ((TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"] != null)
                    {
                        sess = (TMSDeloitte.Models.UserSession)HttpContext.Current.Session["TMSUserSession"];
                        if (sess.SessionUser.ISSUPER)
                        {
                            @*<button type="button" class="btn btn-success" data-toggle="modal" onclick='loadAuthLogData("/TimeSheetForm/GetTimeSheetSetupLog");' data-target="#myLogModal">Show Log</button>*@
                        }

                        var menu = sess.pagelist.Where(x => x.ID == (int)TMSDeloitte.Helper.Enums.FormsName.TimeSheetForm).FirstOrDefault();
                        if (menu != null)
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="@menu.Role">
                        }
                        else
                        {
                            <input type="hidden" id="AuthID" name="AuthID" value="-1">
                        }
                    }

                }


            </div>
        </div>

        <!-- [ Main Content ] end -->
    </div> <!-- [ Card Content ] end -->
</div>


<div id="myModal_Find" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>

            </div>
            <div class="modal-body">
                <div id="FindContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnOk" class="btn btn-primary">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="myLogModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*<h4 class="modal-title">Log</h4>*@
                <button type="button" class="close" data-dismiss="modal">×</button>
            </div>

            <div class="modal-body">
                <h8>Header Log</h8>
                <div id="HeaderLogContainer"></div>
            </div>
            <div class="modal-body">
                <h8>Detail Log</h8>
                <div id="DetailLogContainer"></div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">

        var Table = [];
        var serialNo = 0;
        var year = "";
        var DocNum = "";
        var DocId = 0;
        var DocIsDeleted = false;
        var allDocList = [];
        var index = 1;
        var EmpCode = "0";
        var HcmOneID = 0;
        var startDate;
        var endDate;
        var locationList = [];
        var assignmentList = [];
        var taskList = [];
        var periodList = []
        var statusList = [];
        var gridInstance;
        var popupFindInstance;
        var stdHours = 0;
        var HolidayDateList = [];

        var isDateRangeError = false;
        var viewDataGridInstance;

        var viewData = [
                             {
                                 "ID": 1,
                                 "Day": 'Monday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             },
                             {
                                 "ID": 2,
                                 "Day": 'Tuesday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             },
                             {
                                 "ID": 3,
                                 "Day": 'Wednesday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             },
                             {
                                 "ID": 4,
                                 "Day": 'Thursday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             },
                             {
                                 "ID": 5,
                                 "Day": 'Friday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             },
                             {
                                 "ID": 6,
                                 "Day": 'Saturday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             },
                             {
                                 "ID": 7,
                                 "Day": 'Sunday',
                                 "NonChargeAbleHours": 0,
                                 "ChargeAbleHours": 0,
                                 "LeaveHours": 0,
                                 "OverTimeHours": 0,
                                 "TotalHours": 0,
                             }

        ];


        function GenerateUserTimeView(viewData) {
            
            viewDataGridInstance= $("#gridViewContainer").dxDataGrid({
                dataSource: viewData,
                keyExpr: "ID",
                selection: {
                    mode: "single"
                },
                columnAutoWidth: true,
                allowColumnResizing: true,
                allowColumnReordering: true,
                showBorders: true,
                showScrollbar: 'always',
                scrolling: {
                   mode: 'infinite',
                    showScrollbar: 'always'
                },
                columnFixing: {
                    enabled: true
                },
                columns: [
                    {
                        dataField: "Day",
                        fixed: true
                    },
                {
                    dataField: "NonChargeAbleHours",
                    caption: "Non Chargeable"
                },
                          {
                              dataField: "ChargeAbleHours",
                              caption: "Chargeable"
                          },
                           {
                               dataField: "LeaveHours",
                               caption: "Leave"
                           },
                          {
                              dataField: "OverTimeHours",
                              caption: "Over Time"
                          },
                          {
                              dataField: "TotalHours",
                              caption: "Total Hours"
                          },
                ],
                summary: {
                    totalItems: [
                        {
                            column: "NonChargeAbleHours",
                            summaryType: "sum",
                        },
                        {
                            column: "ChargeAbleHours",
                            summaryType: "sum",
                        },
                        {
                            column: "LeaveHours",
                            summaryType: "sum",
                        },
                        {
                            column: "OverTimeHours",
                            summaryType: "sum",
                        },
                        {
                            column: "TotalHours",
                            summaryType: "sum",
                            showInColumn: "Total",
                        }
                    ]
                }
            }).dxDataGrid("instance");

        }

        function SelectionViewDataGrid(date)
        {
            if (date == undefined)
                return;
            if (date == '')
                return;

            var day = date.getDay();
            if (day == 0)
                day = 7;

            viewDataGridInstance.clearSelection();
            viewDataGridInstance.selectRows([day], true);
        }

    function GetDocList(empid) {
        debugger;
                var url = "/TimeSheetForm/GetDocList?empid=" + empid;
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false
                }).done(function (data) {
                    debugger;
                    assignmentList = JSON.parse(data.AssignmentList.Data);
                    allDocList = data.docList;
                    statusList = data.statusList;

                    $("#employeeCode").val(data.EmpCode);
                    $("#employeeName").val(data.EmpFullName);

                    $("#EmpID").val(data.EmpID);
                    $("#BranchID").val(data.BranchID);

                    // GetLocationBrachID(data.BranchID);

                    GetAssignmentTaskByEmpID(data.EmpID);
                    GetAssignmentLocationByEmpID(data.EmpID);

                }).fail(function (data) {
                });
            }

            function GetAssignmentTaskByEmpID(id) {
                var url = "/TimeSheetForm/GetAssignmentTaskByEmpID?id=" + id;
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false
                }).done(function (data) {

                    taskList = JSON.parse(data.dt_TaskList.Data);

                }).fail(function (data) {
                });
            }

            function GetAssignmentLocationByEmpID(id) {
                var url = "/TimeSheetForm/GetAssignmentLocationByEmpID?id=" + id;
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false
                }).done(function (data) {

                    locationList = JSON.parse(data.dt_LocationList.Data);

                }).fail(function (data) {
                });
            }

            function GenerateDateBox()
            {
                var now = new Date();
                $("#fromDate").dxDateBox({
                    type: "date",
                    pickerType: "calendar",
                    value: now,
                    displayFormat: "EEEE, MMM dd",
                    onValueChanged: function (data) {
                        $("#toDate").dxDateBox({min: data.value});
                    }
                });

                $("#toDate").dxDateBox({
                    type: "date",
                    pickerType: "calendar",
                    value: now,
                    displayFormat: "EEEE, MMM dd",
                    onValueChanged: function (data) {
                        $("#fromDate").dxDateBox({ max: data.value });
                    }
                });

                $('.dx-texteditor-input').attr('readonly', true);
            }

            function GenerateYearDropDown() {

                var min = new Date().getFullYear();
                var max = min+1 ;
                min = min - 1;
           
                var yearList = [];
                var year = {};
                for (var i = min; i <= max; i++) {
                    year = { value: i };
                    yearList.push(year);
                }

                $("#yearDropDown").dxSelectBox({
                    value: yearList[0].value,
                    cacheEnabled: false,
                    items: yearList,
                    displayExpr: "value",
                    valueExpr: "value",
                    placeholder: "Select Year...",
                    cssclass: "form-control frm-cstm",
                    //searchEnabled: true,
                    readOnly: false,
                    onValueChanged: function (data) {
                        //year = data.value;
                        GetTimeSheetByEmpIDandYear();
                    }
                });

            }

            function convertDate(inputFormat) {
                function pad(s) { return (s < 10) ? '0' + s : s; }
                var d = new Date(inputFormat)
                return [pad(d.getDate()), pad(d.getMonth() + 1), d.getFullYear()].join('/')
            }

            function getDateList(startDate, stopDate) {
                if (DocId != 0)
                {
                    serialNo = 0;
                    Table = [];
                    GenerateGrid(Table);
                }
           
                Date.prototype.addDays = function (days) {
                    var date = new Date(this.valueOf());
                    date.setDate(date.getDate() + days);
                    return date;
                }

            

                var dateArray = new Array();
                var currentDate = startDate;
                while (currentDate <= stopDate) {
                    var Details = {
                        SNo: 0,
                        WorkDate: convertDate(new Date(currentDate))
                    };
                    //Table.push(Details);
                    currentDate = currentDate.addDays(1);
                }
                GenerateGrid(Table);
            }

            function GenerateYearPeriodDropDown() {
                var val = 0;
                if (periodList!=null && periodList!=undefined && periodList.length > 0)
                    val = periodList[0].ID;

                $("#period").dxSelectBox({
                    //value: val,
                    cacheEnabled: false,
                    items: periodList,
                    displayExpr: "TimeSheetPeriodDisply",
                    valueExpr: "ID",
                    placeholder: "Select Period...",
                    cssclass: "form-control frm-cstm",
                    searchEnabled: true,
                    readOnly: false,
                    onValueChanged: function (data) {
                        startDate = "";
                        endDate = "";
                        var periodData = periodList.find(x => x.ID === data.value);
                        if (periodData != undefined)
                        {
                            if (periodData != null)
                            {
                                $("#standardHours").val(periodData.StdHoursInWeek);
                                stdHours = parseInt(parseInt(periodData.StdHoursInWeek) / 5);
                                startDate = new Date(periodData._Monday);
                                endDate = new Date(periodData._Friday);
                                GetHolidays();
                                if (DocId == 0) {
                                    serialNo = 0;
                                    Table = [];
                                    GenerateGrid(Table);
                                }
                            }
                        
                        }
                    }
                });

            }

            function GetHolidays()
            {
                HolidayDateList = [];
                var year = $("#yearDropDown").dxSelectBox("instance").option('value');
                var fromDate = GetForMatedDate(startDate);
                var toDate = GetForMatedDate(endDate);
                var url = "/TimeSheetForm/GetHolidays?year=" + year + "&fromDate=" + fromDate + "&toDate=" + toDate;
                $.ajax({
                    url: url,
                    method: "GET",
                    async: false,
                    //data: { empCode: empCode },
                }).done(function (response) {
                    HolidayDateList = response.holidayDateList;
                }).fail(function (data) {
                });
            }

            function GetHCMUser() {
                loadPanel.show();
                var url = "/TimeSheetForm/GetUsers";
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false,
                }).done(function (data) {
                    var JSON_Response = data.response;
                    GenerateUserTableDropDown(JSON_Response);
                    loadPanel.hide();
                }).fail(function (data) {
                    loadPanel.hide();
                });
            }

      
            function GenerateUserTableDropDown(jsonData) {
                $("#empGridBox").dxDropDownBox({
                    valueExpr: "ID",
                    placeholder: "Select Employee...",
                    displayExpr: "EMPLOYEECODE",
                    showClearButton: true,
                    dataSource: jsonData,
                    contentTemplate: function (e) {
                        var value = e.component.option("value"),
                            $dataGrid = $("<div>").dxDataGrid({
                                dataSource: e.component.getDataSource(),
                                columns: ["EMPLOYEECODE", "FULLNAME", "DESIGNATIONNAME", "DEPARTMENTNAME", { dataField: "BRANCHID", visible: false }],
                                hoverStateEnabled: true,
                                paging: { enabled: true, pageSize: 10 },
                                filterRow: { visible: true },
                                scrolling: { mode: "infinite" },
                                height: 345,
                                selection: { mode: "single" },
                                selectedRowKeys: value,
                                onSelectionChanged: function (selectedItems) {
                                    if (selectedItems != null)
                                        if (selectedItems != undefined) {
                                            var keys = selectedItems.selectedRowKeys;
                                            if (keys.length > 0)
                                            {
                                                e.component.option("value", keys[0].ID);

                                                EmpCode = keys[0].EMPLOYEECODE;
                                                HcmOneID = keys[0].HCMOneID;
                                                $("#employeeName").val(keys[0].FULLNAME);
                                          
                                                //GetUserInfoByEmpCode(EmpCode);

                                                $("#empGridBox").dxDropDownBox("instance").close();

                                                //GetLocationBrachID(keys[0].BRANCHID);
                                                GetTimeSheetByEmpIDandYear();
                                            }
                                       
                                        }


                                }
                            });

                        dataGrid = $dataGrid.dxDataGrid("instance");

                        e.component.on("valueChanged", function (args) {
                            var value = args.value;
                            dataGrid.selectRows(value, false);
                        });

                        return $dataGrid;
                    }
                });
            }

            function GetUserInfoByEmpCode(empCode) {
                loadPanel.show();
                var url = "/TimeSheetForm/GetUserInfoByEmpCode";
                $.ajax({
                    url: url,
                    method: "GET",
                    async: false,
                    data: { empCode: empCode },
                }).done(function (response) {
                    $("#employeeName").val("");
               
                    if (response.Success) {
                        $("#employeeName").val(response.UserInfo.FULLNAME);
                    }
              

                    loadPanel.hide();

                }).fail(function (data) {
                    loadPanel.hide();
                });
            }

            function GetLogData(url) {
                loadData(url+"?docNum=" + DocNum);
            }

            function GetForMatedDate(Wdate)
            {
                if (Wdate==null || Wdate==undefined)
                return null;

                var Fday = ("0" + (Wdate.getDate())).slice(-2);
                var Fmonth = ("0" + (Wdate.getMonth() + 1)).slice(-2);
                var Fyear = Wdate.getFullYear();
                var Fhour = Wdate.getHours();
                var Fminute = Wdate.getMinutes();
                var Fsecond = Wdate.getSeconds();
                var _workDate = Fyear + "-" + Fmonth + "-" + Fday;
                return _workDate;
            }

            function GenerateGrid(JSON_Response) {
                gridInstance = $("#gridContainerTimeSheet").dxDataGrid({
                    dataSource: JSON_Response,
                    keyExpr: "KEY",
                    selection: {
                        mode: "single"
                    },
                    hoverStateEnabled: true,
                    columnAutoWidth: false,
                    allowColumnResizing: true,
                    allowColumnReordering: true,
                    showBorders: true,
                    showScrollbar: 'always',
                    filterRow: { visible: true },
                    editing: {
                        mode: "cell",
                        allowUpdating: true
                    },
                    scrolling: {
                        mode: "vertical",
                        showScrollbar: 'always'
                    },
                    paging: { pageSize: 10 },
                    editing: {
                        mode: "batch",
                        allowUpdating: true,
                        allowDeleting: true,
                        allowAdding: true
                    },
                    columns: [
                        {
                            dataField: "ID",
                            allowEditing: false,
                            visible:false,
                        },
                        {
                            dataField: "HeaderID",
                            allowEditing: false,
                            visible: false,
                        },
                        {
                            dataField: "SNo",
                            caption: "S.No",
                            dataType: "number",
                            allowEditing: false,
                            width:"50"
                        },
                         {
                             dataField: "_WorkDate",
                             allowEditing: false,
                             visible: false,
                         },
                        {
                            dataField: "WorkDate",
                            caption: "Work Date",
                            validationRules: [{ type: "required" }],
                            dataType: 'date',
                            format: 'dd/MM/yyyy',
                            width: "100",
                            setCellValue: function (rowData, value) {
                                if (value != null)
                                {
                                    rowData.WorkDate = value;

                                    rowData._WorkDate = GetForMatedDate(value);
                                    rowData.WorkHours = 0;
                                    SelectionViewDataGrid(value);
                                   
                                }
                                
                            },
                        },
                         {
                             dataField: "AssignmentID",
                             caption: "Assignment",
                             validationRules: [{ type: "required" }],
                             setCellValue: function (rowData, value, options) {
                                 rowData.AssignmentID = value;
                                 rowData.TaskID = null;
                                 rowData.LocationID = null;
                                  rowData.WorkHours = 0;
                                 var date = options.WorkDate;
                                 SelectionViewDataGrid(date);
                                 if (value == 100001 && value != null && value != undefined)
                                 {
                                     rowData.OnSite = false;
                                     rowData.LocationID = 0;
                                 }

                                 if (value == 200001 && value != null && value != undefined)
                                 {
                                     $("#gridContainerTimeSheet").dxDataGrid("columnOption", "TotalAllowed", "visible", true);
                                     $("#gridContainerTimeSheet").dxDataGrid("columnOption", "Balance", "visible", true);
                                     $("#gridContainerTimeSheet").dxDataGrid("columnOption", "UseD", "visible", true);
                                     $("#gridContainerTimeSheet").dxDataGrid("columnOption", "CarryForward", "visible", true);
                                     rowData.TotalAllowed = 0;
                                     rowData.Balance = 0;
                                     rowData.UseD =0;
                                     rowData.CarryForward = 0;
                                     rowData.WorkHours = 0;
                                     rowData.OnSite = false;
                                     rowData.LocationID = 0;
                                 }
                                 


                             },
                             lookup: {
                                 dataSource: assignmentList,
                                 valueExpr: "ID",
                                 displayExpr: "Name"
                             }
                         },
                         {
                             dataField: "TaskID",
                             caption: "Task",
                             validationRules: [{ type: "required" }],
                             width: "370",
                             setCellValue: function (rowData, value, options) {
                                 rowData.TaskID = value;
                                 rowData.WorkHours = 0;
                                 var date = options.WorkDate;
                                 SelectionViewDataGrid(date);

                                 if (value != null && value != undefined)
                                 {
                                     if (options.AssignmentID == 200001) {
                                         rowData.OnSite = false;
                                         rowData.LocationID = 0;
                                         var leaveTask = taskList.filter(x=>x.AssignmentID == 200001);
                                         var ifExist = leaveTask.filter(x=>x.ID == value);
                                         
                                         if (ifExist.length > 0) {

                                             rowData.TotalAllowed = ifExist[0].TotalAllowed;
                                             rowData.Balance = ifExist[0].Balance;
                                             rowData.UseD = ifExist[0].UseD;
                                             rowData.CarryForward = ifExist[0].CarryForward;

                                         }
                                     }
                                    
                                 }
                                
                             },
                             lookup: {
                                 dataSource: function (options) {
                                     if (options != undefined) {
                                         if (options.rowType == "data") {
                                             if (options.data.AssignmentID != 200001) {
                                                 $("#gridContainerTimeSheet").dxDataGrid("columnOption", "TotalAllowed", "visible", false);
                                                 $("#gridContainerTimeSheet").dxDataGrid("columnOption", "Balance", "visible", false);
                                                 $("#gridContainerTimeSheet").dxDataGrid("columnOption", "UseD", "visible", false);
                                                 $("#gridContainerTimeSheet").dxDataGrid("columnOption", "CarryForward", "visible", false);
                                             }
                                         }
                                     }

                                    
                                     return {
                                         store: taskList,
                                         filter: options.data ? ["AssignmentID", "=", options.data.AssignmentID] : null
                                     };
                                 },
                                 valueExpr: "ID",
                                 displayExpr: "Name"
                             }
                         },

                         {
                             dataField: "TotalAllowed",
                             caption: "Total Allowed",
                             allowEditing: false,
                             visible: false,
                         },
                         {
                             dataField: "Balance",
                             caption: "Balance",
                             allowEditing: false,
                             visible: false,
                         },
                         {
                             dataField: "UseD",
                             caption: "Used",
                             allowEditing: false,
                             visible: false,
                         },
                         {
                             dataField: "CarryForward",
                             caption: "Carry Forward",
                             allowEditing: false,
                             visible: false,
                         },

                         {
                             dataField: "OnSite",
                             caption: "OnSite",
                             width: "80",
                             allowEditing: true,
                             dataType: 'boolean',
                             setCellValue: function (rowData, value, options) {
                                 rowData.OnSite = value;

                                 var date = options.WorkDate;
                                 SelectionViewDataGrid(date);

                                 if (value == false)
                                     rowData.LocationID = 0;
                                 else
                                     rowData.LocationID = null;

                             },
                         },
                         {
                             dataField: "LocationID",
                             caption: "Location",
                             validationRules: [{ type: "required" }],
                             setCellValue: function (rowData, value, options) {
                                 rowData.LocationID = value;

                                 var date = options.WorkDate;
                                 SelectionViewDataGrid(date);
                             },
                             lookup: {
                                 dataSource: function (options) {

                                     if (options != undefined)
                                     {
                                         if(options.rowType=="data")
                                         {
                                             $('#EmpLeaveStatus').hide();
                                             $('#TotalAllowed').val("0");
                                             $('#Balance').val("0");
                                             $('#UseD').val("0");
                                             $('#CarryForward').val("0");

                                             if (options.data.AssignmentID == 100001)
                                             {
                                                 var newLocation=[]
                                                 $.each(locationList, function (index, val) {

                                                     var ifExist = newLocation.filter(x=>x.ID == val.ID);
                                                     if (ifExist.length == 0)
                                                     {
                                                         var Details = {
                                                             ID: val.ID,
                                                             Name: val.Name,
                                                             AssignmentID: val.AssignmentID
                                                         };
                                                         newLocation.push(Details);
                                                     }
                                                
                                                 });

                                                 return {
                                                     store: newLocation
                                                 };
                                             }


                                             
                                            
                                         }
                                     }
                                     return {
                                         store: locationList,
                                         filter: options.data ? ["AssignmentID", "=", options.data.AssignmentID] : null
                                     };
                                
                                 },
                                 valueExpr: "ID",
                                 displayExpr: "Name"
                             }
                         },


                          {
                              dataField: "WorkHours",
                              caption: "Work Hours",
                              validationRules: [ { type: "required" }],
                              dataType: "number",
                              width: "98",
                              allowEditing: true,
                              setCellValue: function (rowData, value, options) {
                                  rowData.WorkHours = value;

                                  var date = options.WorkDate;
                                  SelectionViewDataGrid(date);
                              },
                          },
                          {
                              dataField: "Description",
                              caption: "Description",
                              allowEditing: true,
                          },
                          
                          {
                              dataField: "IsDeleted",
                              allowEditing: true,
                              allowEditing: false,
                              visible: false,
                              dataType: 'boolean',
                          },
                    ],
                    onCellPrepared: function (options) {
                   
                        if (startDate != "" && endDate != "")
                        {
                            if (startDate != undefined && endDate != undefined)
                            {
                                var day = 60 * 60 * 24 * 1000;
                                var start_Date = new Date(startDate.getTime() - day);
                                var end_Date = new Date(endDate.getTime() + day);
                                options.cellElement.find('.dx-datebox').dxDateBox("option", "min", start_Date);
                                options.cellElement.find('.dx-datebox').dxDateBox("option", "max", end_Date);
                                //console.log("startDate => " + start_Date + " , endDate =>" + end_Date);
                            }
                           
                        }
                   
                    },
                    onInitNewRow: function (e) {
                        e.data.ID = 0;
                        serialNo = serialNo + 1;
                        e.data.SNo = serialNo;
                        e.data.OnSite = true;
                        e.data.IsDeleted = false;

                    },
                    onEditorPreparing: function (e) {

                        if (e.parentType == "dataRow" && e.dataField === "WorkHours") {
                            var valueChangedHandler = e.editorOptions.onValueChanged;
                            e.editorOptions.onValueChanged = function (args) {
                                valueChangedHandler(args); // default logic
                                setTimeout(() => {
                                    /*
                                    var chargeAbleHours = 0;
                                    var nonChargeAbleHours = 0;
                                    var overTime = 0;
                                    e.component.getVisibleRows().forEach(row => {
                                        if (row.data.IsDeleted == false) {
                                            if (row.data.TaskID != undefined &&
                                                row.data.WorkHours != undefined) {
                                                var SelectedData = taskList.filter(x=>x.ID == row.data.TaskID);
                                                if (SelectedData.length > 0) {

                                                    var data = SelectedData[0];

                                                    if (data.NonChargeable == 1)
                                                        nonChargeAbleHours = nonChargeAbleHours + row.data.WorkHours;
                                                    else
                                                        chargeAbleHours = chargeAbleHours + row.data.WorkHours;

                                                    if (row.data.WorkHours > stdHours && data.NonChargeable != 1) {
                                                        var oTime = row.data.WorkHours - stdHours;
                                                        overTime = overTime + oTime;
                                                    }
                                                }
                                            }


                                        }
                                    });
                                    $("#nonChargeableHours").val(nonChargeAbleHours);
                                    $("#chargeableHours").val(chargeAbleHours);
                                    $("#overTimeHours").val(overTime);
                                    $("#totalHoursWorked").val(chargeAbleHours);//+ overTime
                                    */
                                    SaveGridAndCalculateHours();
                                });
                            };
                        }

                        if (e.parentType == "dataRow" && e.dataField === "WorkDate") {
                            var valueChangedHandler = e.editorOptions.onValueChanged;
                            e.editorOptions.onValueChanged = function (args) {
                                valueChangedHandler(args); // default logic
                                setTimeout(() => {
                                   
                                    if (args.previousValue != null && args.previousValue != undefined)
                                    {
                                        if(GetForMatedDate(args.previousValue)!=GetForMatedDate(args.value))
                                        {
                                            RemoveCalculationOnDay(args.previousValue);
                                        }
                                    }
                                    

                                    SelectionViewDataGrid(args.value);
                                    SaveGridAndCalculateHours();
                                });
                            };
                        }
                    },
                    onEditorPrepared: function (e) {
                   
                  
                    },
                    onEditingStart: function (e) {
                    }, 
                    onRowInserting: function (e) {

                    },
                    onRowInserted: function (e) {
                  
                        var dataExist = Table.filter(x=>x.KEY == e.data.KEY);

                        if (dataExist.length == 0)
                        {

                            var _workDate = GetForMatedDate(e.data.WorkDate);
                            var Details = {
                                ID: e.data.ID,
                                HeaderID: e.data.HeaderID,
                                SNO: e.data.SNo,
                                KEY: e.data.KEY,
                                _WorkDate: _workDate,
                                WorkDate: e.data.WorkDate,
                                AssignmentID: e.data.AssignmentID,
                                TaskID: e.data.TaskID,
                                LocationID: e.data.LocationID,
                                WorkHours: e.data.WorkHours,
                                Description: e.data.Description,
                                OnSite: e.data.OnSite,
                                IsDeleted: false
                            };

                            Table.push(Details);
                            serialNo = Table.length;
                        }
                        else
                        {
                            $.each(Table, function (index, val) {

                                var Wdate = new Date(val.WorkDate);
                                //var Fday = ("0" + (Wdate.getDate())).slice(-2);
                                //var Fmonth = ("0" + (Wdate.getMonth() + 1)).slice(-2);
                                //var Fyear = Wdate.getFullYear();  // yields year
                                //var Fhour = Wdate.getHours();     // yields hours
                                //var Fminute = Wdate.getMinutes(); // yields minutes
                                //var Fsecond = Wdate.getSeconds(); // yields seconds
                                //var _workDate = Fyear + "-" + Fmonth + "-" + Fday;

                                var _workDate = GetForMatedDate(Wdate);
                                if (val.KEY == e.data.KEY) {
                                    val._WorkDate = _workDate;
                                    val.WorkDate = e.data.WorkDate;
                                    val.AssignmentID = e.data.AssignmentID;
                                    val.TaskID = e.data.TaskID;
                                    val.LocationID = e.data.LocationID;
                                    val.WorkHours = e.data.WorkHours;
                                    val.Description = e.data.Description;
                                    val.OnSite = e.data.OnSite;
                                }

                            });
                        }

                    },
                    onRowUpdating: function (e) {
                    },
                    onRowUpdated: function (e) {

                        var Wdate = new Date(e.data.WorkDate);
                        //var Fday = ("0" + (Wdate.getDate())).slice(-2);
                        //var Fmonth = ("0" + (Wdate.getMonth() + 1)).slice(-2);
                        //var Fyear = Wdate.getFullYear();  // yields year
                        //var Fhour = Wdate.getHours();     // yields hours
                        //var Fminute = Wdate.getMinutes(); // yields minutes
                        //var Fsecond = Wdate.getSeconds(); // yields seconds
                        //var _workDate = Fyear + "-" + Fmonth + "-" + Fday;

                        var _workDate = GetForMatedDate(Wdate);

                        $.each(Table, function (index, val) {
                            if (val.KEY == e.data.KEY) {
                                val._WorkDate = _workDate;
                                val.WorkDate = e.data.WorkDate;
                                val.AssignmentID= e.data.AssignmentID;
                                val.TaskID= e.data.TaskID;
                                val.LocationID= e.data.LocationID;
                                val.WorkHours= e.data.WorkHours;
                                val.Description= e.data.Description;
                                val.OnSite = e.data.OnSite;
                            }

                        });


                        serialNo = Table.length;
                    },
                    onRowRemoving: function (e) {
                        $.each(Table, function (index, val) {
                            if (val.KEY == e.data.KEY) {
                                if (val.WorkDate != undefined)
                                    RemoveCalculationOnDay(val.WorkDate);
                            }
                        });
                    },
                    onRowRemoved: function (e) {
                        $.each(Table, function (index, val) {
                            if (val.KEY == e.key) {
                                val.IsDeleted = true;
                            }
                        });

                        CalculateViewHours();
                    },
                    onCellClick: function (e) {
                        if (e.data != undefined)
                        {
                            if (e.data.WorkDate != undefined) {
                                if (e.data.WorkDate != null) {
                                    SelectionViewDataGrid(e.data.WorkDate);
                                }
                            }
                        }
                       
                        
                    },
                    onSelectionChanged: function (selectedItems) {
                        var data = selectedItems.selectedRowsData[0];
                        if (data) {
                            SelectionViewDataGrid(data.WorkDate);
                        }
                    }
                });

                var gridContainer = $("#gridContainerTimeSheet").dxDataGrid("instance");
                gridContainer.columnOption('SNo', 'sortOrder', 'desc');
            }

           
            function GetTimeSheetByEmpIDandYear() {

                debugger;
                var empid = $("#EmpID").val(); //$("#empGridBox").dxDropDownBox("instance").option('value');
                var year = $("#yearDropDown").dxSelectBox("instance").option('value');
                var View = $("#isView").val();
                if (empid != null && year!=null)
                {
                    loadPanel.show();
                    serialNo = 0;
                    periodList = [];
                    var url = "/TimeSheetForm/GetTimeSheetByEmpIDandYear?empID=" + empid + "&year=" + year + "&isView=" + View;
                    $.ajax({
                        url: url,
                        method: "GET",
                        data: {},
                        async: false,
                    }).done(function (data) {
                        loadPanel.hide();
                        $("#docNumber").val("");

                        var JSON_Response = JSON.parse(data.response.Data);
                        periodList = JSON_Response.PeriodList;

                        GenerateYearPeriodDropDown(periodList);

                    }).fail(function (data) {
                        loadPanel.hide();
                        console.log(data);
                    });
                }
            
            }

            function GetLocationBrachID(branchID)
            {
                //loadPanel.show();
                serialNo = 0;
                var url = "/TimeSheetForm/GetLocationBrachID?branchID=" + branchID;
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false,
                }).done(function (data) {
                    //loadPanel.hide();
                    locationList = data.response;
                    if ( (startDate != "" || endDate != "" ) &&
                       (startDate != undefined || endDate != undefined))
                    {
                        if (DocId == 0) {
                            serialNo = 0;
                            Table = [];
                            GenerateGrid(Table);
                        }
                    }
                 


                }).fail(function (data) {
                    loadPanel.hide();
                    console.log(data);
                });
            }

            function RemoveCalculationOnDay(date)
            {
                var days = ['', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
                var dayName = "";
                var id = 0;
                id = date.getDay();
                //for view Data
                if (id == 0)
                    id = 7;

                dayName = days[id];
                var objIndex = viewData.findIndex((obj => obj.ID == id));
                if (objIndex != -1) {

                    viewData[objIndex].NonChargeAbleHours = 0;
                    viewData[objIndex].ChargeAbleHours = 0;
                    TotalChargeAbleHours = 0;
                    viewData[objIndex].LeaveHours = 0;
                    viewData[objIndex].OverTimeHours = 0;
                    viewData[objIndex].TotalHours = 0;
                    GenerateUserTimeView(viewData);
                }
            }

            function SaveGridAndCalculateHours() {

                var gridContainer = $("#gridContainerTimeSheet").dxDataGrid("instance");
                gridContainer.getController('validating').validate(true).done(function (result) {
                    /*
                    if (result) {
                        gridContainer.saveEditData();
                        setTimeout(() => {
                            CalculateViewHours();
                        },100); 
                    }
                    */
                    gridContainer.saveEditData();
                    setTimeout(() => {
                        CalculateViewHours();
                    }, 100);
                });


            }

            function CalculateViewHours() {

                var gridSaved = false;
                var viewTable = [];

                var gridContainer = $("#gridContainerTimeSheet").dxDataGrid("instance");
                gridContainer.getController('validating').validate(true).done(function (result) {
                    if (result)
                        gridSaved = true;
                    else
                        gridSaved = false;
                });


                if (gridSaved == true)
                {
                    viewTable = Table;
                }
                else
                {
                    $.each($("#gridContainerTimeSheet").dxDataGrid('instance').getController("editing")._editData, function (index, val) {

                        if (val.data != undefined)
                            viewTable.push(val.data);
                        else
                            viewTable.push(val.oldData);
                    });
                }
                var msg = "";
                var TotalChargeAbleHours = 0;
                var days = ['', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
                var dayName = "";
                var gridDataTable = [];
                //viewTable = viewTable.filter(x=>x.IsDeleted == false);
                $.each(viewTable, function (index, val) {
                    var _workDate = GetForMatedDate(val.WorkDate);
                    if (_workDate != null)
                    {
                        var dataExist = gridDataTable.filter(x=>x._WorkDate == _workDate);
                        if (dataExist.length == 0) {
                            var Details = {
                                _WorkDate: _workDate
                            };
                            gridDataTable.push(Details);
                        }
                    }
                });

                $.each(gridDataTable, function (index1, val1) {
                    var gridData = viewTable.filter(x=>x._WorkDate == val1._WorkDate);

                    var viewNonChargeAbleHours = 0;
                    var viewChargeAbleHours = 0;
                    var viewLeaveHours = 0;
                    var viewOverTimeHours = 0;

                    var id = -1;

                    $.each(gridData, function (index, val) {
                        if (val.IsDeleted == false) {
                            id = val.WorkDate.getDay();
                            if ((HolidayDateList.indexOf(val._WorkDate) > -1))
                            {
                                if (val.WorkHours == undefined)
                                    val.WorkHours = 0;

                                viewOverTimeHours = viewOverTimeHours + val.WorkHours;
                            }
                            else
                            {
                                var SelectedData = taskList.filter(x=>x.AssignmentID == val.AssignmentID && x.ID == val.TaskID);
                                if (SelectedData.length > 0) {

                                    var data = SelectedData[0];


                                    if (data.isLeave) {
                                        viewLeaveHours = viewLeaveHours + val.WorkHours;
                                        viewNonChargeAbleHours = 0;
                                        viewChargeAbleHours = 0;
                                    }
                                    else {
                                        if (data.NonChargeable == 1) {
                                            viewNonChargeAbleHours = viewNonChargeAbleHours + val.WorkHours;
                                        }
                                        else {
                                            viewChargeAbleHours = viewChargeAbleHours + val.WorkHours;
                                        }

                                        if (val.WorkHours > stdHours && data.NonChargeable != 1) {
                                            var oTime = val.WorkHours - stdHours;
                                            //viewOverTimeHours = viewOverTimeHours + oTime;
                                        }
                                    }



                                }
                            }
                            
                        }
                    });

                    //if (viewChargeAbleHours > stdHours)
                    //    msg = "Your Chargeable hours is exceeded from standard hours!";
                    if (viewNonChargeAbleHours > 24)
                    {
                        if (msg == "")
                            msg = "Your Non-chargeable hours is exceeded from 24 hours!";
                    }
                        
                    if (viewLeaveHours > stdHours)
                    {
                        if (msg == "")
                            msg = "Your Leave hours is exceeded from standard hours!";
                    }
                   
                    //for view Data
                    if (id == 0)
                        id = 7;

                    dayName = days[id];
                    var objIndex = viewData.findIndex((obj => obj.ID == id));
                    if (objIndex != -1) {
                        var _OverTimeHours = viewChargeAbleHours - stdHours;
                        if (_OverTimeHours < 0)
                            _OverTimeHours = 0;

                        _OverTimeHours = _OverTimeHours + viewOverTimeHours;

                        var _ChargeAbleHours = viewChargeAbleHours - _OverTimeHours;
                        if (_ChargeAbleHours < 0)
                            _ChargeAbleHours = 0;

                        viewData[objIndex].NonChargeAbleHours = viewNonChargeAbleHours;
                        viewData[objIndex].ChargeAbleHours = _ChargeAbleHours;
                        TotalChargeAbleHours = TotalChargeAbleHours + viewData[objIndex].ChargeAbleHours;
                        viewData[objIndex].LeaveHours = viewLeaveHours;
                        viewData[objIndex].OverTimeHours = _OverTimeHours;//viewOverTimeHours;
                        viewData[objIndex].TotalHours = viewNonChargeAbleHours + viewData[objIndex].ChargeAbleHours + _OverTimeHours + viewLeaveHours;
                        if (viewData[objIndex].TotalHours > 24)
                        {
                            if (msg == "")
                                msg = "Your " + dayName + " total hours is exceeded from 24 hours!";
                        }
                        
                    }
                    GenerateUserTimeView(viewData);
                });
                if (TotalChargeAbleHours > parseFloat($("#standardHours").val()) ) {
                    if (msg == "")
                        msg = "Your total chargeable hours is exceeded from standard hour!";
                }

                return msg;
            }

            function SaveAndSubmitCall(status) {
                var isSuccess = true;
                var message = '';

                var timeSheetFormObj = {
                    ID: DocId,
                    Status: status,
                    DocNum: $("#docNumber").val(),
                    EmpID: $("#EmpID").val(),//$("#empGridBox").dxDropDownBox("instance").option('value'),
                    EmpCode: $("#EmpCode").val(),// $("#empGridBox").dxDropDownBox("instance").option('text'),
                    Year: $("#yearDropDown").dxSelectBox("instance").option('value'),
                    Period: $("#period").dxSelectBox("instance").option('value'),
                    StandardHours: $("#standardHours").val(),
                    NonChargeableHours: $("#nonChargeableHours").val(),
                    ChargeableHours: $("#chargeableHours").val(),
                    OverTimeHours: $("#overTimeHours").val(),
                    TotalHours: $("#totalHoursWorked").val()
                };
                //if (timeSheetFormObj.EmpID == "" ) {
                //    isSuccess = false;
                //    message = 'Please select employee, ';
                //}
                if (timeSheetFormObj.Year == "" || timeSheetFormObj.Year == null) {
                    isSuccess = false;
                    message = message + 'Please select year, ';
                }
                if (timeSheetFormObj.Period == "" || timeSheetFormObj.Period==null) {
                    isSuccess = false;
                    message = message + 'Please select period';
                }
               

                if (isSuccess) {
                    loadPanel.show();
                    var gridContainer = $("#gridContainerTimeSheet").dxDataGrid("instance");
                    gridContainer.getController('validating').validate(true).done(function (result) {
                        if (result) {
                            gridContainer.saveEditData();
                            setTimeout(function () { SaveAndSubmit(status); }, 2000);
                        }
                        else {
                            loadPanel.hide();
                            AlertToast('error', "Please add require data in table!");
                        }

                    });


                }
                else {
                    AlertToast('error', message);
                }
            }

            function SaveAndSubmit(status) {
                var notSaved = $('#gridContainerTimeSheet').dxDataGrid('instance').getController('editing').hasChanges();
                if (notSaved) {
                    setTimeout(function () { SaveAndSubmit(status); }, 2000);
                }
                else {

                    //gridInstance= $("#gridContainerTimeSheet").dxDataGrid('instance');
                    //gridInstance.getDataSource().store().load().done((res) => {
                    //    Table = [];
                    //    Table = res;
                    //});

                    var NonChargeAbleHours=$("#gridViewContainer").dxDataGrid("instance").getTotalSummaryValue("NonChargeAbleHours");
                    var ChargeAbleHours = $("#gridViewContainer").dxDataGrid("instance").getTotalSummaryValue("ChargeAbleHours");
                    var OverTimeHours= $("#gridViewContainer").dxDataGrid("instance").getTotalSummaryValue("OverTimeHours");
                    var LeaveHours= $("#gridViewContainer").dxDataGrid("instance").getTotalSummaryValue("LeaveHours");
                    var TotalHours = $("#gridViewContainer").dxDataGrid("instance").getTotalSummaryValue("TotalHours");
                   

                    if (Table.length == 0) {
                        loadPanel.hide();
                        AlertToast('error', "Please add record!");
                        return;
                    }

                    if (Table.filter(x=>x.WorkDate == null).length > 0 ||
                       Table.filter(x=>x.WorkDate == "").length > 0) {
                        loadPanel.hide();
                        AlertToast('error', 'Please select work date in time sheet!');
                        return;
                    }

                    if (Table.filter(x=>x.AssignmentID == null).length > 0 ||
                      Table.filter(x=>x.AssignmentID == undefined).length > 0 ||
                      Table.filter(x=>x.AssignmentID == 0).length > 0) {
                        loadPanel.hide();
                        AlertToast('error', 'Please select assignment in time sheet!');
                        return;
                    }

                    if (Table.filter(x=>x.TaskID == null).length > 0 ||
                    Table.filter(x=>x.TaskID == undefined).length > 0 ||
                    Table.filter(x=>x.TaskID == 0).length > 0) {
                        loadPanel.hide();
                        AlertToast('error', 'Please select task in time sheet!');
                        return;
                    }

                    if (Table.filter(x=>x.LocationID == null).length > 0 ||
                    Table.filter(x=>x.LocationID == undefined).length > 0) {
                        loadPanel.hide();
                        AlertToast('error', 'Please select location in time sheet!');
                        return;
                    }

                    if (Table.filter(x=>x.WorkHours == null).length > 0 ||
                        Table.filter(x=>x.WorkHours == 0).length > 0)
                    {
                        loadPanel.hide();
                        AlertToast('error', 'Please add work hours in time sheet!');
                        return;
                    }

                    var leaveTask = taskList.filter(x=>x.AssignmentID == 200001);
                    var leaveTable = Table.filter(x=>x.AssignmentID == 200001);
                    leaveTable = leaveTable.filter(x=>x.IsDeleted == false);
                    $.each(leaveTask, function (index, val) {
                        var leave = leaveTable.filter(x=>x.TaskID == val.ID);
                        if (leave.length > 0) {
                            var leaveCount = 0;
                            $.each(leave, function (index2, val2) {
                                leaveCount = leaveCount + 1;
                            });
                            var Balance = parseInt(val.Balance);
                            var used = parseInt(val.UseD) + parseInt(leaveCount);
                            if (Balance < used) {
                                loadPanel.hide();
                                AlertToast('error',"Your Leave: " + val.Name + " is not allowed more than Balance!");
                                return;
                            }
                        }

                    });
                    if (ChargeAbleHours > parseFloat($("#standardHours").val())) {
                        loadPanel.hide();
                        AlertToast('error', "Your total chargeable hours is exceeded from standard hour!");
                        return;
                    }


                    var errorMsg = CalculateViewHours();
                    if (errorMsg != "")
                    {
                        loadPanel.hide();
                        AlertToast('error', errorMsg);
                        return;
                    }


                    var timeSheetFormObj = {
                        ID: DocId,
                        Status: status,
                        DocNum: DocNum,
                        EmpID: $("#EmpID").val(),
                        EmpCode: $("#employeeCode").val(),
                        Year: $("#yearDropDown").dxSelectBox("instance").option('value'),
                        Period: $("#period").dxSelectBox("instance").option('value'),
                        StandardHours: stdHours,//$("#standardHours").val(),
                        NonChargeableHours: NonChargeAbleHours,
                        ChargeableHours: ChargeAbleHours,
                        OverTimeHours: OverTimeHours,
                        LeaveHours: LeaveHours,
                        TotalHours: TotalHours,
                        Detail: Table
                    };
                    console.log(timeSheetFormObj);
                    var jsonData = JSON.stringify({
                        obj: timeSheetFormObj
                    });
                    
                    var url = "/TimeSheetForm/AddUpdateTimeSheetPeriod";
                    $.ajax({
                        type: "POST",
                        url: url,
                        contentType: 'application/json',
                        data: jsonData,
                        dataType: "json",
                        async: false,
                        success: function (response) {
                            loadPanel.hide();
                            if (response.Success) {
                                AlertToast('success', response.Message);
                                setTimeout(function () {
                                    window.location.reload();
                                }, 5000);
                            }
                            else {
                                AlertToast('error', response.Message);
                            }
                        },
                        error: function (response) {
                            console.log(response);
                            loadPanel.hide();
                        },
                        failure: function (response) {
                            console.log(response);
                            loadPanel.hide();
                        }

                    });

                }

            }

            function GeneratePopupFindGrid() {
    
                //var empid = $("#EmpID").val(); 
                //if (empid != null && empid != 0) { }
                loadPanel.show();
                var ur = "/TimeSheetForm/GetAllDocumentsByEmpID";
                $.ajax({
                    url: ur,
                    method: "GET",
                    data: {},
                    async: false,
                }).done(function (data) {
                    var JSON_Response = JSON.parse(data.response.Data);
                    console.log(JSON_Response);
                    popupFindInstance = $("#FindContainer").dxDataGrid({
                        dataSource: JSON_Response,
                        keyExpr: "DocNum",
                        paging: { pageSize: 10 },
                        columnAutoWidth: true,
                        pager: { showInfo: true },
                        allowColumnResizing: true,
                        allowColumnReordering: true,
                        showBorders: true,
                        showScrollbar: 'always',
                        filterRow: { visible: true },
                        scrolling: {
                            mode: "horizontal",
                            showScrollbar: 'always'
                        },
                        selection: {
                            mode: "single"
                        },
                        columns: [
                            {
                                dataField: "ID",
                                caption: "ID",
                                visible: false
                            },
                            {
                                dataField: "DocNum",
                                caption: "Document #"
                            },
                            {
                                dataField: "Year",
                                caption: "Year"
                            },
                               {
                                   dataField: "Status",
                                   caption: "Status",
                                   lookup: {
                                       dataSource: statusList,
                                       valueExpr: "ID",
                                       displayExpr: "Name"
                                   }
                               },
                              {
                                  dataField: "PeriodText",
                                  caption: "Period"
                              },
                              {
                                  dataField: "FromDate",
                                  caption: "From Date"
                              },
                              {
                                  dataField: "ToDate",
                                  caption: "To Date"
                              },

                            {
                                dataField: "NonChargeableHours",
                                caption: "Non Chargeable Hours"
                            },
                            {
                                dataField: "ChargeableHours",
                                caption: "Chargeable Hours"
                            },
                            {
                                dataField: "OverTimeHours",
                                caption: "Over Time Hours"
                            },
                            {
                                dataField: "LeaveHours",
                                caption: "Leave Hours"
                            },
                            {
                                dataField: "TotalHours",
                                caption: "Total Hours"
                            },
                             {
                                 dataField: "StandardHours",
                                 caption: "Standard Hours"
                             },
                            {
                                dataField: "CreatedDate",
                                caption: "Created Date"
                            }
                        ]
                    }).dxDataGrid("instance");

                    $("#select-all-mode").dxSelectBox({
                        dataSource: ["allPages", "page"],
                        value: "allPages",
                        onValueChanged: function (data) {
                            dataGrid.option("selection.selectAllMode", data.value);
                        }
                    });

                    $("#show-checkboxes-mode").dxSelectBox({
                        dataSource: ["none", "onClick", "onLongTap", "always"],
                        value: "onClick",
                        onValueChanged: function (data) {
                            dataGrid.option("selection.showCheckBoxesMode", data.value);
                            $("#select-all-mode").dxSelectBox("instance").option("disabled", data.value === "none");
                        }
                    });

                    popupFindInstance.clearSelection();

                    loadPanel.hide();

                }).fail(function (data) {
                    console.log(data);
                    loadPanel.hide();
                });
            }

            function ValidateAuthorization() {
                var id = $("#AuthID").val();
                var isSuccess = false;

                if (id == -1)
                    isSuccess = true;
                if (id == 2)
                    isSuccess = true;

                if (isSuccess) {
                    $("#save").remove();
                    $("#submit").remove();
                    $("#gridContainerTimeSheet").dxDataGrid({ disabled: true });
                }
            }

            function loadAuthLogData(url) {
                if (DocId != 0) {
                    url = url + "?docId=" + DocId;

                    $.ajax({
                        url: url,
                        method: "GET",
                        data: {},
                        async: false,
                    }).done(function (data) {
                        data = JSON.parse(data.response.Data);
                        console.log(data);
                        $("#HeaderLogContainer").dxDataGrid({
                            dataSource: data.Table,
                            paging: { pageSize: 10 },
                            columnAutoWidth: true,
                            pager: { showInfo: true },
                            allowColumnResizing: true,
                            allowColumnReordering: true,
                            showBorders: true,
                            showScrollbar: 'always',
                            filterRow: { visible: true },
                            scrolling: {
                                mode: "horizontal",
                                showScrollbar: 'always'
                            },
                        });
                        $("#DetailLogContainer").dxDataGrid({
                            dataSource: data.Table1,
                            paging: { pageSize: 10 },
                            columnAutoWidth: true,
                            pager: { showInfo: true },
                            allowColumnResizing: true,
                            allowColumnReordering: true,
                            showBorders: true,
                            showScrollbar: 'always',
                            filterRow: { visible: true },
                            scrolling: {
                                mode: "horizontal",
                                showScrollbar: 'always'
                            },
                        });

                    }).fail(function (data) {
                        console.log(data);
                    });
                }



            }

            function GetTimeSheetByDocNum(docNum,isCopyFrom) {
                loadPanel.show();
                Table = [];
                serialNo = 0;
                EmpCode = "0";
                HcmOneID = 0;
                if (isCopyFrom == false)
                {
                    startDate = "";
                    endDate = "";
                }
                var url = "/TimeSheetForm/GetTimeSheetByDocNum?docNum=" + docNum;
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false,
                }).done(function (data) {
                    loadPanel.hide();
                    $("#docNumber").val("");
                    var JSON_Response = JSON.parse(data.response.Data);
                    console.log(JSON_Response);

                    var Details = {
                        Friday: "",
                        HeaderID: 0,
                        ID: JSON_Response.Period,
                        IsDeleted: false,
                        Monday: "",
                        Period: JSON_Response.PeriodText,
                        SNo: 0,
                        StdHoursInWeek: JSON_Response.StdHoursInWeek,
                        _Friday: JSON_Response._Friday,
                        _Monday: JSON_Response._Monday
                    };
                    periodList.push(Details);
                    //sno = sno - 1;

                    VlidateDetails(JSON_Response, isCopyFrom);


                }).fail(function (data) {
                    loadPanel.hide();
                    console.log(data);
                });
            }

            function GetTimeSheetByDocNumAndEmpID(docNum, empid) {
                loadPanel.show();
                Table = [];
                serialNo = 0;
                EmpCode = "0";
                HcmOneID = 0;
                startDate = "";
                endDate = "";
                var url = "/TimeSheetForm/GetTimeSheet?docNum=" + docNum + "&EmpID=" + empid;
                $.ajax({
                    url: url,
                    method: "GET",
                    data: {},
                    async: false,
                }).done(function (data) {
                    loadPanel.hide();
                    var JSON_Response = JSON.parse(data.response.Data);
                    VlidateDetails(JSON_Response,false);
                }).fail(function (data) {
                    loadPanel.hide();
                    console.log(data);
                });
            }


            function VlidateDetails(JSON_Response,isCopyFrom)
            {
              

                $("#docNumber").val("");

            
                if (isCopyFrom == true)
                {
                    DocId = 0;
                    DocNum = "";
                    $("#docStatus").val("");
                    $("#docNumber").val("");
                }
                else
                {
                    DocId = JSON_Response.ID;
                    DocNum = JSON_Response.DocNum;
                    $("#period").dxSelectBox({ value: JSON_Response.Period });
                    $("#docStatus").val(JSON_Response.StatusName);
                    $("#docNumber").val(JSON_Response.DocNum);
                }
                

                //$("#empGridBox").dxDropDownBox({ value: JSON_Response.EmpID });
                //GetUserInfoByEmpCode(JSON_Response.EmpCode);
                $("#yearDropDown").dxSelectBox({ value: JSON_Response.Year });
               
                
                //$("#standardHours").val(JSON_Response.StandardHours);
                $("#nonChargeableHours").val(JSON_Response.NonChargeableHours),
                 $("#chargeableHours").val(JSON_Response.ChargeableHours);;
                $("#overTimeHours").val(JSON_Response.OverTimeHours);;
                $("#totalHoursWorked").val(JSON_Response.TotalHours);
               

                $.each(JSON_Response.Detail, function (index, val) {
                   var Details = {};
                    if (isCopyFrom)
                    {
                        Details = {
                            ID: 0,
                            HeaderID: val.HeaderID,
                            SNo: val.SNo,
                            KEY: val.KEY,
                            _WorkDate: "",
                            WorkDate: null,
                            AssignmentID: val.AssignmentID,
                            TaskID: val.TaskID,
                            LocationID: val.LocationID,
                            WorkHours: 0,
                            Description: val.Description,
                            OnSite: val.OnSite,
                            IsDeleted: false
                        };
                    }
                    else
                    {
                        Details = {
                            ID: val.ID,
                            HeaderID: val.HeaderID,
                            SNo: val.SNo,
                            KEY: val.KEY,
                            _WorkDate: val._WorkDate,
                            WorkDate: new Date(val._WorkDate),
                            AssignmentID: val.AssignmentID,
                            TaskID: val.TaskID,
                            LocationID: val.LocationID,
                            WorkHours: val.WorkHours,
                            Description: val.Description,
                            OnSite: val.OnSite,
                            IsDeleted: false
                        };
                    }
                    Table.push(Details);
                    //sno = sno - 1;
                });

                
                
                
                serialNo = Table.length;

                $('#docNumber').prop("disabled", true);

                if (isCopyFrom == false)
                {
                    if (JSON_Response.Status == 2 || JSON_Response.Status == 3 || JSON_Response.Status == 4) {
                        $("#save").remove();
                        $("#submit").remove();

                        $("#gridContainerTimeSheet").dxDataGrid({
                            editing: {
                                mode: "batch",
                                allowUpdating: false,
                                allowDeleting: false,
                                allowAdding: false
                            },
                        });


                        $("#yearDropDown").dxSelectBox({ readOnly: true });
                        $("#period").dxSelectBox({ readOnly: true });
                    }
                }


                GenerateGrid(Table);
                GenerateUserTimeView(viewData);
                CalculateViewHours();
               
            }


    $('document').ready(function () {
        debugger;
                $('#EmpLeaveStatus').hide();

        GenerateUserTimeView(viewData);

        var CheckValue = $("#EmployeeID").val();

                GetDocList($("#EmployeeID").val());
           
                // GetHCMUser();
                //GenerateDateBox();
                GenerateYearDropDown();
                ValidateAuthorization();

                $("#yearDropDown").dxSelectBox({ value: new Date().getFullYear() });

                GetTimeSheetByEmpIDandYear();

                if ($("#DocNum").val() != "" && $("#EmployeeID").val() != "")
                {
                    GetTimeSheetByDocNumAndEmpID($("#DocNum").val(), $("#EmployeeID").val());
                    $("#topButton").remove();
                }

                $('#copyFrom').click(function () {

                   var period= $("#period").dxSelectBox("instance").option('value')
                   if (period == "" || period == null) {
                        AlertToast('error', 'Please select period');
                        return;
                    }

                    loadPanel.show();
                    GenerateGrid([]);
                    setTimeout(function () {
                        GetTimeSheetByDocNum(allDocList[allDocList.length - 1], true);
                    }, 1000);
                   
                    
                });
                $('#save').click(function () {
                    SaveAndSubmitCall(1);
                });
                $('#submit').click(function () {
                    SaveAndSubmitCall(2);
                });
                $('#new').click(function () {
                    //DocNum = "";
                    //DocId = 0;
                    //Table = [];
                    //$("#docNumber").val("");
                    //$('#docNumber').prop("disabled", true);
                    //serialNo = 0;

                    window.location.reload();
                });
                $('#find').click(function () {
                    $("#docNumber").val("");
                    $('#docNumber').prop("disabled", false);
                });
                $('#first').click(function () {
                    $('#docNumber').prop("disabled", true);
                    index = 0;
                    GetTimeSheetByDocNum(allDocList[index],false);
                });
                $('#last').click(function () {
                    $('#docNumber').prop("disabled", true);
                    index = allDocList.length - 1;
                    GetTimeSheetByDocNum(allDocList[index],false);
                });
                $('#previous').click(function () {
                    $('#docNumber').prop("disabled", true);
                    if (index != 0)
                        index = index - 1;
                    GetTimeSheetByDocNum(allDocList[index], false);
                });
                $('#next').click(function () {
                    $('#docNumber').prop("disabled", true);
                    if (index < allDocList.length-1)
                        index = index + 1;

                    GetTimeSheetByDocNum(allDocList[index], false);
                });
                $('#btnOk').click(function () {
                    var selectedRow = popupFindInstance.getSelectedRowsData();
                    if (selectedRow.length > 0)
                    {
                        GetTimeSheetByDocNum(selectedRow[0].DocNum, false);
                    }
                    $('#myModal_Find').modal('hide');
                    $('body').removeClass('modal-open');
                    $('.modal-backdrop').remove();

                });
                $("#docNumber").blur(function () {

                    GetTimeSheetByDocNum($("#docNumber").val(), false);

                });
            });

</script>

